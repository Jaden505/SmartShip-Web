{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pad2 = exports.convertToPercentage = exports.boundAlpha = exports.isPercentage = exports.isOnePointZero = exports.clamp01 = exports.bound01 = void 0;\n/**\n * Take input from [0, n] and return it as [0, 1]\n * @hidden\n */\nfunction bound01(n, max) {\n  if (isOnePointZero(n)) {\n    n = '100%';\n  }\n  var isPercent = isPercentage(n);\n  n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));\n  // Automatically convert percentage into number\n  if (isPercent) {\n    n = parseInt(String(n * max), 10) / 100;\n  }\n  // Handle floating point rounding errors\n  if (Math.abs(n - max) < 0.000001) {\n    return 1;\n  }\n  // Convert into [0, 1] range if it isn't already\n  if (max === 360) {\n    // If n is a hue given in degrees,\n    // wrap around out-of-range values into [0, 360] range\n    // then convert into [0, 1].\n    n = (n < 0 ? n % max + max : n % max) / parseFloat(String(max));\n  } else {\n    // If n not a hue given in degrees\n    // Convert into [0, 1] range if it isn't already.\n    n = n % max / parseFloat(String(max));\n  }\n  return n;\n}\nexports.bound01 = bound01;\n/**\n * Force a number between 0 and 1\n * @hidden\n */\nfunction clamp01(val) {\n  return Math.min(1, Math.max(0, val));\n}\nexports.clamp01 = clamp01;\n/**\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n * @hidden\n */\nfunction isOnePointZero(n) {\n  return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;\n}\nexports.isOnePointZero = isOnePointZero;\n/**\n * Check to see if string passed in is a percentage\n * @hidden\n */\nfunction isPercentage(n) {\n  return typeof n === 'string' && n.indexOf('%') !== -1;\n}\nexports.isPercentage = isPercentage;\n/**\n * Return a valid alpha value [0,1] with all invalid values being set to 1\n * @hidden\n */\nfunction boundAlpha(a) {\n  a = parseFloat(a);\n  if (isNaN(a) || a < 0 || a > 1) {\n    a = 1;\n  }\n  return a;\n}\nexports.boundAlpha = boundAlpha;\n/**\n * Replace a decimal with it's percentage value\n * @hidden\n */\nfunction convertToPercentage(n) {\n  if (n <= 1) {\n    return \"\".concat(Number(n) * 100, \"%\");\n  }\n  return n;\n}\nexports.convertToPercentage = convertToPercentage;\n/**\n * Force a hex value to have 2 characters\n * @hidden\n */\nfunction pad2(c) {\n  return c.length === 1 ? '0' + c : String(c);\n}\nexports.pad2 = pad2;","map":{"version":3,"names":["Object","defineProperty","exports","value","pad2","convertToPercentage","boundAlpha","isPercentage","isOnePointZero","clamp01","bound01","n","max","isPercent","Math","min","parseFloat","parseInt","String","abs","val","indexOf","a","isNaN","concat","Number","c","length"],"sources":["/Users/jadenvanrijswijk/Desktop/Programming files/IntelliJ/Assignment1-Trains/smartship-ewa-1/node_modules/@ctrl/tinycolor/dist/util.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pad2 = exports.convertToPercentage = exports.boundAlpha = exports.isPercentage = exports.isOnePointZero = exports.clamp01 = exports.bound01 = void 0;\n/**\n * Take input from [0, n] and return it as [0, 1]\n * @hidden\n */\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) {\n        n = '100%';\n    }\n    var isPercent = isPercentage(n);\n    n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));\n    // Automatically convert percentage into number\n    if (isPercent) {\n        n = parseInt(String(n * max), 10) / 100;\n    }\n    // Handle floating point rounding errors\n    if (Math.abs(n - max) < 0.000001) {\n        return 1;\n    }\n    // Convert into [0, 1] range if it isn't already\n    if (max === 360) {\n        // If n is a hue given in degrees,\n        // wrap around out-of-range values into [0, 360] range\n        // then convert into [0, 1].\n        n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));\n    }\n    else {\n        // If n not a hue given in degrees\n        // Convert into [0, 1] range if it isn't already.\n        n = (n % max) / parseFloat(String(max));\n    }\n    return n;\n}\nexports.bound01 = bound01;\n/**\n * Force a number between 0 and 1\n * @hidden\n */\nfunction clamp01(val) {\n    return Math.min(1, Math.max(0, val));\n}\nexports.clamp01 = clamp01;\n/**\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n * @hidden\n */\nfunction isOnePointZero(n) {\n    return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;\n}\nexports.isOnePointZero = isOnePointZero;\n/**\n * Check to see if string passed in is a percentage\n * @hidden\n */\nfunction isPercentage(n) {\n    return typeof n === 'string' && n.indexOf('%') !== -1;\n}\nexports.isPercentage = isPercentage;\n/**\n * Return a valid alpha value [0,1] with all invalid values being set to 1\n * @hidden\n */\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n    return a;\n}\nexports.boundAlpha = boundAlpha;\n/**\n * Replace a decimal with it's percentage value\n * @hidden\n */\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        return \"\".concat(Number(n) * 100, \"%\");\n    }\n    return n;\n}\nexports.convertToPercentage = convertToPercentage;\n/**\n * Force a hex value to have 2 characters\n * @hidden\n */\nfunction pad2(c) {\n    return c.length === 1 ? '0' + c : String(c);\n}\nexports.pad2 = pad2;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}