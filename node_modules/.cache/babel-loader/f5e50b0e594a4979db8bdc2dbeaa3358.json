{"ast":null,"code":"import bindEvents from '../utils/bindEvents.js';\nimport { bindProps, getPropsValues } from '../utils/bindProps.js';\nimport mountableMixin from '../utils/mountableMixin.js';\nimport TwoWayBindingWrapper from '../utils/TwoWayBindingWrapper.js';\nimport WatchPrimitiveProperties from '../utils/WatchPrimitiveProperties.js';\nimport { mappedPropsToVueProps } from './build-component.js';\nconst props = {\n  center: {\n    required: true,\n    twoWay: true,\n    type: Object,\n    noBind: true\n  },\n  zoom: {\n    required: false,\n    twoWay: true,\n    type: Number,\n    noBind: true\n  },\n  heading: {\n    type: Number,\n    twoWay: true\n  },\n  mapTypeId: {\n    twoWay: true,\n    type: String\n  },\n  tilt: {\n    twoWay: true,\n    type: Number\n  },\n  options: {\n    type: Object,\n    default() {\n      return {};\n    }\n  }\n};\nconst events = ['bounds_changed', 'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'idle', 'mousemove', 'mouseout', 'mouseover', 'resize', 'rightclick', 'tilesloaded'];\n\n// Plain Google Maps methods exposed here for convenience\nconst linkedMethods = ['panBy', 'panTo', 'panToBounds', 'fitBounds'].reduce((all, methodName) => {\n  all[methodName] = function () {\n    if (this.$mapObject) {\n      this.$mapObject[methodName].apply(this.$mapObject, arguments);\n    }\n  };\n  return all;\n}, {});\n\n// Other convenience methods exposed by Vue Google Maps\nconst customMethods = {\n  resize() {\n    if (this.$mapObject) {\n      google.maps.event.trigger(this.$mapObject, 'resize');\n    }\n  },\n  resizePreserveCenter() {\n    if (!this.$mapObject) {\n      return;\n    }\n    const oldCenter = this.$mapObject.getCenter();\n    google.maps.event.trigger(this.$mapObject, 'resize');\n    this.$mapObject.setCenter(oldCenter);\n  },\n  /// Override mountableMixin::_resizeCallback\n  /// because resizePreserveCenter is usually the\n  /// expected behaviour\n  _resizeCallback() {\n    this.resizePreserveCenter();\n  }\n};\nexport default {\n  mixins: [mountableMixin],\n  props: mappedPropsToVueProps({\n    ...props,\n    ...events.reduce((obj, eventName) => ({\n      ...obj,\n      [`on${eventName.charAt(0).toUpperCase()}${eventName.slice(1)}`.replace(/[-_]+(.)?/g, (_, c) => c ? c.toUpperCase() : '')]: Function\n    }), {})\n  }),\n  inheritAttrs: false,\n  provide() {\n    this.$mapPromise = new Promise((resolve, reject) => {\n      this.$mapPromiseDeferred = {\n        resolve,\n        reject\n      };\n    });\n    return {\n      $mapPromise: this.$mapPromise\n    };\n  },\n  emits: ['center_changed', 'zoom_changed', 'bounds_changed'],\n  computed: {\n    finalLat() {\n      return this.center && typeof this.center.lat === 'function' ? this.center.lat() : this.center.lat;\n    },\n    finalLng() {\n      return this.center && typeof this.center.lng === 'function' ? this.center.lng() : this.center.lng;\n    },\n    finalLatLng() {\n      return {\n        lat: this.finalLat,\n        lng: this.finalLng\n      };\n    }\n  },\n  watch: {\n    zoom(zoom) {\n      if (this.$mapObject) {\n        this.$mapObject.setZoom(zoom);\n      }\n    }\n  },\n  mounted() {\n    return this.$gmapApiPromiseLazy().then(() => {\n      // getting the DOM element where to create the map\n      const element = this.$refs['vue-map'];\n\n      // creating the map\n      const options = {\n        ...this.options,\n        ...getPropsValues(this, props)\n      };\n      delete options.options;\n      this.$mapObject = new google.maps.Map(element, options);\n\n      // binding properties (two and one way)\n      bindProps(this, this.$mapObject, props);\n      // binding events\n      bindEvents(this, this.$mapObject, events);\n\n      // manually trigger center and zoom\n      TwoWayBindingWrapper((increment, decrement, shouldUpdate) => {\n        this.$mapObject.addListener('center_changed', () => {\n          if (shouldUpdate()) {\n            this.$emit('center_changed', this.$mapObject.getCenter());\n          }\n          decrement();\n        });\n        const updateCenter = () => {\n          increment();\n          this.$mapObject.setCenter(this.finalLatLng);\n        };\n        WatchPrimitiveProperties(this, ['finalLat', 'finalLng'], updateCenter);\n      });\n      this.$mapObject.addListener('zoom_changed', () => {\n        this.$emit('zoom_changed', this.$mapObject.getZoom());\n      });\n      this.$mapObject.addListener('bounds_changed', () => {\n        this.$emit('bounds_changed', this.$mapObject.getBounds());\n      });\n      this.$mapPromiseDeferred.resolve(this.$mapObject);\n      return this.$mapObject;\n    }).catch(error => {\n      throw error;\n    });\n  },\n  methods: {\n    ...customMethods,\n    ...linkedMethods\n  }\n};","map":{"version":3,"mappings":"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","names":["bindEvents","bindProps","getPropsValues","mountableMixin","TwoWayBindingWrapper","WatchPrimitiveProperties","mappedPropsToVueProps","props","center","required","twoWay","type","Object","noBind","zoom","Number","heading","mapTypeId","String","tilt","options","default","events","linkedMethods","reduce","all","methodName","$mapObject","apply","arguments","customMethods","resize","google","maps","event","trigger","resizePreserveCenter","oldCenter","getCenter","setCenter","_resizeCallback","mixins","obj","eventName","charAt","toUpperCase","slice","replace","_","c","Function","inheritAttrs","provide","$mapPromise","Promise","resolve","reject","$mapPromiseDeferred","emits","computed","finalLat","lat","finalLng","lng","finalLatLng","watch","setZoom","mounted","$gmapApiPromiseLazy","then","element","$refs","Map","increment","decrement","shouldUpdate","addListener","$emit","updateCenter","getZoom","getBounds","catch","error","methods"],"sourceRoot":"","sources":["/Users/jadenvanrijswijk/Desktop/Programming files/IntelliJ/Assignment1-Trains/smartship-ewa-1/node_modules/@fawmi/vue-google-maps/src/components/map.vue"],"sourcesContent":["<template>\n  <div class=\"vue-map-container\" :class=\"$attrs.class\">\n    <div ref=\"vue-map\" class=\"vue-map\" :style=\"$attrs.style ? $attrs.style : ''\"></div>\n    <div class=\"vue-map-hidden\">\n      <slot></slot>\n    </div>\n    <slot name=\"visible\"></slot>\n  </div>\n</template>\n\n<script>\nimport bindEvents from '../utils/bindEvents.js'\nimport { bindProps, getPropsValues } from '../utils/bindProps.js'\nimport mountableMixin from '../utils/mountableMixin.js'\n\nimport TwoWayBindingWrapper from '../utils/TwoWayBindingWrapper.js'\nimport WatchPrimitiveProperties from '../utils/WatchPrimitiveProperties.js'\nimport { mappedPropsToVueProps } from './build-component.js'\n\nconst props = {\n  center: {\n    required: true,\n    twoWay: true,\n    type: Object,\n    noBind: true,\n  },\n  zoom: {\n    required: false,\n    twoWay: true,\n    type: Number,\n    noBind: true,\n  },\n  heading: {\n    type: Number,\n    twoWay: true,\n  },\n  mapTypeId: {\n    twoWay: true,\n    type: String,\n  },\n  tilt: {\n    twoWay: true,\n    type: Number,\n  },\n  options: {\n    type: Object,\n    default() {\n      return {}\n    },\n  },\n}\n\nconst events = [\n  'bounds_changed',\n  'click',\n  'dblclick',\n  'drag',\n  'dragend',\n  'dragstart',\n  'idle',\n  'mousemove',\n  'mouseout',\n  'mouseover',\n  'resize',\n  'rightclick',\n  'tilesloaded',\n]\n\n// Plain Google Maps methods exposed here for convenience\nconst linkedMethods = ['panBy', 'panTo', 'panToBounds', 'fitBounds'].reduce((all, methodName) => {\n  all[methodName] = function () {\n    if (this.$mapObject) {\n      this.$mapObject[methodName].apply(this.$mapObject, arguments)\n    }\n  }\n  return all\n}, {})\n\n// Other convenience methods exposed by Vue Google Maps\nconst customMethods = {\n  resize() {\n    if (this.$mapObject) {\n      google.maps.event.trigger(this.$mapObject, 'resize')\n    }\n  },\n  resizePreserveCenter() {\n    if (!this.$mapObject) {\n      return\n    }\n\n    const oldCenter = this.$mapObject.getCenter()\n    google.maps.event.trigger(this.$mapObject, 'resize')\n    this.$mapObject.setCenter(oldCenter)\n  },\n\n  /// Override mountableMixin::_resizeCallback\n  /// because resizePreserveCenter is usually the\n  /// expected behaviour\n  _resizeCallback() {\n    this.resizePreserveCenter()\n  },\n}\n\nexport default {\n  mixins: [mountableMixin],\n  props: mappedPropsToVueProps({...props, ...events.reduce((obj, eventName) => ({...obj, [`on${eventName.charAt(0).toUpperCase()}${eventName.slice(1)}`.replace(/[-_]+(.)?/g, (_, c) => c ? c.toUpperCase() : '')]: Function}), {}) } ),\n  inheritAttrs: false,\n\n  provide() {\n    this.$mapPromise = new Promise((resolve, reject) => {\n      this.$mapPromiseDeferred = { resolve, reject }\n    })\n    return {\n      $mapPromise: this.$mapPromise,\n    }\n  },\n  emits: ['center_changed', 'zoom_changed', 'bounds_changed'],\n  computed: {\n    finalLat() {\n      return this.center && typeof this.center.lat === 'function'\n        ? this.center.lat()\n        : this.center.lat\n    },\n    finalLng() {\n      return this.center && typeof this.center.lng === 'function'\n        ? this.center.lng()\n        : this.center.lng\n    },\n    finalLatLng() {\n      return { lat: this.finalLat, lng: this.finalLng }\n    },\n  },\n\n  watch: {\n    zoom(zoom) {\n      if (this.$mapObject) {\n        this.$mapObject.setZoom(zoom)\n      }\n    },\n  },\n\n  mounted() {\n    return this.$gmapApiPromiseLazy()\n      .then(() => {\n        // getting the DOM element where to create the map\n        const element = this.$refs['vue-map']\n\n        // creating the map\n        const options = {\n          ...this.options,\n          ...getPropsValues(this, props),\n        }\n        delete options.options\n        this.$mapObject = new google.maps.Map(element, options)\n\n        // binding properties (two and one way)\n        bindProps(this, this.$mapObject, props)\n        // binding events\n        bindEvents(this, this.$mapObject, events)\n\n        // manually trigger center and zoom\n        TwoWayBindingWrapper((increment, decrement, shouldUpdate) => {\n          this.$mapObject.addListener('center_changed', () => {\n            if (shouldUpdate()) {\n              this.$emit('center_changed', this.$mapObject.getCenter())\n            }\n            decrement()\n          })\n\n          const updateCenter = () => {\n            increment()\n            this.$mapObject.setCenter(this.finalLatLng)\n          }\n\n          WatchPrimitiveProperties(this, ['finalLat', 'finalLng'], updateCenter)\n        })\n        this.$mapObject.addListener('zoom_changed', () => {\n          this.$emit('zoom_changed', this.$mapObject.getZoom())\n        })\n        this.$mapObject.addListener('bounds_changed', () => {\n          this.$emit('bounds_changed', this.$mapObject.getBounds())\n        })\n\n        this.$mapPromiseDeferred.resolve(this.$mapObject)\n\n        return this.$mapObject\n      })\n      .catch((error) => {\n        throw error\n      })\n  },\n  methods: {\n    ...customMethods,\n    ...linkedMethods,\n  },\n}\n</script>\n<style>\n.vue-map {\n  width: 100%;\n  height: 100%;\n  min-height: 2rem;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}