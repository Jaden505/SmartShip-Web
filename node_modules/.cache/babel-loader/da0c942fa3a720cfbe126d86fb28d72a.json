{"ast":null,"code":"import buildComponent from './build-component.js';\nconst props = {\n  animation: {\n    twoWay: true,\n    type: Number\n  },\n  attribution: {\n    type: Object\n  },\n  clickable: {\n    type: Boolean,\n    twoWay: true,\n    default: true\n  },\n  cursor: {\n    type: String,\n    twoWay: true\n  },\n  draggable: {\n    type: Boolean,\n    twoWay: true,\n    default: false\n  },\n  icon: {\n    twoWay: true\n  },\n  label: {},\n  opacity: {\n    type: Number,\n    default: 1\n  },\n  options: {\n    type: Object\n  },\n  place: {\n    type: Object\n  },\n  position: {\n    type: Object,\n    twoWay: true\n  },\n  shape: {\n    type: Object,\n    twoWay: true\n  },\n  title: {\n    type: String,\n    twoWay: true\n  },\n  zIndex: {\n    type: Number,\n    twoWay: true\n  },\n  visible: {\n    twoWay: true,\n    default: true\n  }\n};\nconst events = ['click', 'rightclick', 'dblclick', 'drag', 'dragstart', 'dragend', 'mouseup', 'mousedown', 'mouseover', 'mouseout'];\nexport default buildComponent({\n  mappedProps: props,\n  events,\n  name: 'marker',\n  ctr: () => google.maps.Marker,\n  inject: {\n    $clusterPromise: {\n      default: null\n    }\n  },\n  emits: events,\n  unmounted() {\n    if (!this.$markerObject) {\n      return;\n    }\n    if (this.$clusterObject) {\n      // Repaint will be performed in `updated()` of cluster\n      this.$clusterObject.removeMarker(this.$markerObject, true);\n    } else {\n      this.$markerObject.setMap(null);\n    }\n  },\n  beforeCreate(options) {\n    if (this.$clusterPromise) {\n      options.map = null;\n    }\n    return this.$clusterPromise;\n  },\n  afterCreate(inst) {\n    events.forEach(event => {\n      inst.addListener(event, payload => {\n        this.$emit(event, payload);\n      });\n    });\n    if (this.$clusterPromise) {\n      this.$clusterPromise.then(co => {\n        this.$clusterObject = co;\n        co.addMarker(inst);\n      });\n    }\n  }\n});","map":{"version":3,"mappings":"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","names":["buildComponent","props","animation","twoWay","type","Number","attribution","Object","clickable","Boolean","default","cursor","String","draggable","icon","label","opacity","options","place","position","shape","title","zIndex","visible","events","mappedProps","name","ctr","google","maps","Marker","inject","$clusterPromise","emits","unmounted","$markerObject","$clusterObject","removeMarker","setMap","beforeCreate","map","afterCreate","inst","forEach","event","addListener","payload","$emit","then","co","addMarker"],"sourceRoot":"","sources":["/Users/jadenvanrijswijk/Desktop/Programming files/IntelliJ/Assignment1-Trains/smartship-ewa-1/node_modules/@fawmi/vue-google-maps/src/components/marker.vue"],"sourcesContent":["<template>\n  <div @click=\"()=> {console.log('sdfsd')}\">\n    <slot></slot>\n  </div>\n</template>\n<script>\n\nimport buildComponent from './build-component.js'\n\nconst props = {\n  animation: {\n    twoWay: true,\n    type: Number,\n  },\n  attribution: {\n    type: Object,\n  },\n  clickable: {\n    type: Boolean,\n    twoWay: true,\n    default: true,\n  },\n  cursor: {\n    type: String,\n    twoWay: true,\n  },\n  draggable: {\n    type: Boolean,\n    twoWay: true,\n    default: false,\n  },\n  icon: {\n    twoWay: true,\n  },\n  label: {},\n  opacity: {\n    type: Number,\n    default: 1,\n  },\n  options: {\n    type: Object,\n  },\n  place: {\n    type: Object,\n  },\n  position: {\n    type: Object,\n    twoWay: true,\n  },\n  shape: {\n    type: Object,\n    twoWay: true,\n  },\n  title: {\n    type: String,\n    twoWay: true,\n  },\n  zIndex: {\n    type: Number,\n    twoWay: true,\n  },\n  visible: {\n    twoWay: true,\n    default: true,\n  },\n}\n\nconst events = [\n  'click',\n  'rightclick',\n  'dblclick',\n  'drag',\n  'dragstart',\n  'dragend',\n  'mouseup',\n  'mousedown',\n  'mouseover',\n  'mouseout',\n]\n\nexport default buildComponent({\n  mappedProps: props,\n  events,\n  name: 'marker',\n  ctr: () => google.maps.Marker,\n\n  inject: {\n    $clusterPromise: {\n      default: null,\n    },\n  },\n  emits: events,\n  unmounted() {\n    if (!this.$markerObject) {\n      return\n    }\n\n    if (this.$clusterObject) {\n      // Repaint will be performed in `updated()` of cluster\n      this.$clusterObject.removeMarker(this.$markerObject, true)\n    } else {\n      this.$markerObject.setMap(null)\n    }\n  },\n\n  beforeCreate(options) {\n    if (this.$clusterPromise) {\n      options.map = null\n    }\n\n    return this.$clusterPromise\n  },\n\n  afterCreate(inst) {\n    events.forEach((event)=> {\n      inst.addListener(event, (payload)=> {\n        this.$emit(event, payload)\n      });\n    })\n    if (this.$clusterPromise) {\n      this.$clusterPromise.then((co) => {\n        this.$clusterObject = co\n        co.addMarker(inst)\n      })\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}