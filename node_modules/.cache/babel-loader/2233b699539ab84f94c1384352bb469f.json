{"ast":null,"code":"import { createVNode, isVNode, render } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport MessageBoxConstructor from './index.mjs';\nimport { isFunction, hasOwn, isString, isObject } from '@vue/shared';\nimport { isUndefined } from '../../../utils/types.mjs';\nconst messageInstance = /* @__PURE__ */new Map();\nconst initInstance = (props, container, appContext = null) => {\n  const vnode = createVNode(MessageBoxConstructor, props, isFunction(props.message) || isVNode(props.message) ? {\n    default: isFunction(props.message) ? props.message : () => props.message\n  } : null);\n  vnode.appContext = appContext;\n  render(vnode, container);\n  document.body.appendChild(container.firstElementChild);\n  return vnode.component;\n};\nconst genContainer = () => {\n  return document.createElement(\"div\");\n};\nconst showMessage = (options, appContext) => {\n  const container = genContainer();\n  options.onVanish = () => {\n    render(null, container);\n    messageInstance.delete(vm);\n  };\n  options.onAction = action => {\n    const currentMsg = messageInstance.get(vm);\n    let resolve;\n    if (options.showInput) {\n      resolve = {\n        value: vm.inputValue,\n        action\n      };\n    } else {\n      resolve = action;\n    }\n    if (options.callback) {\n      options.callback(resolve, instance.proxy);\n    } else {\n      if (action === \"cancel\" || action === \"close\") {\n        if (options.distinguishCancelAndClose && action !== \"cancel\") {\n          currentMsg.reject(\"close\");\n        } else {\n          currentMsg.reject(\"cancel\");\n        }\n      } else {\n        currentMsg.resolve(resolve);\n      }\n    }\n  };\n  const instance = initInstance(options, container, appContext);\n  const vm = instance.proxy;\n  for (const prop in options) {\n    if (hasOwn(options, prop) && !hasOwn(vm.$props, prop)) {\n      vm[prop] = options[prop];\n    }\n  }\n  vm.visible = true;\n  return vm;\n};\nfunction MessageBox(options, appContext = null) {\n  if (!isClient) return Promise.reject();\n  let callback;\n  if (isString(options) || isVNode(options)) {\n    options = {\n      message: options\n    };\n  } else {\n    callback = options.callback;\n  }\n  return new Promise((resolve, reject) => {\n    const vm = showMessage(options, appContext != null ? appContext : MessageBox._context);\n    messageInstance.set(vm, {\n      options,\n      callback,\n      resolve,\n      reject\n    });\n  });\n}\nconst MESSAGE_BOX_VARIANTS = [\"alert\", \"confirm\", \"prompt\"];\nconst MESSAGE_BOX_DEFAULT_OPTS = {\n  alert: {\n    closeOnPressEscape: false,\n    closeOnClickModal: false\n  },\n  confirm: {\n    showCancelButton: true\n  },\n  prompt: {\n    showCancelButton: true,\n    showInput: true\n  }\n};\nMESSAGE_BOX_VARIANTS.forEach(boxType => {\n  ;\n  MessageBox[boxType] = messageBoxFactory(boxType);\n});\nfunction messageBoxFactory(boxType) {\n  return (message, title, options, appContext) => {\n    let titleOrOpts = \"\";\n    if (isObject(title)) {\n      options = title;\n      titleOrOpts = \"\";\n    } else if (isUndefined(title)) {\n      titleOrOpts = \"\";\n    } else {\n      titleOrOpts = title;\n    }\n    return MessageBox(Object.assign({\n      title: titleOrOpts,\n      message,\n      type: \"\",\n      ...MESSAGE_BOX_DEFAULT_OPTS[boxType]\n    }, options, {\n      boxType\n    }), appContext);\n  };\n}\nMessageBox.close = () => {\n  messageInstance.forEach((_, vm) => {\n    vm.doClose();\n  });\n  messageInstance.clear();\n};\nMessageBox._context = null;\nexport { MessageBox as default };","map":{"version":3,"mappings":"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","names":["messageInstance","Map","initInstance","props","container","appContext","vnode","createVNode","MessageBoxConstructor","isFunction","message","isVNode","default","render","document","body","appendChild","firstElementChild","component","genContainer","createElement","showMessage","options","onVanish","delete","vm","onAction","action","currentMsg","get","resolve","showInput","value","inputValue","callback","instance","proxy","distinguishCancelAndClose","reject","prop","hasOwn","$props","visible","MessageBox","isClient","Promise","isString","_context","set","MESSAGE_BOX_VARIANTS","MESSAGE_BOX_DEFAULT_OPTS","alert","closeOnPressEscape","closeOnClickModal","confirm","showCancelButton","prompt","forEach","boxType","messageBoxFactory","title","titleOrOpts","isObject","isUndefined","Object","assign","type","close","_","doClose","clear"],"sources":["../../../../../../packages/components/message-box/src/messageBox.ts"],"sourcesContent":["import { createVNode, render } from 'vue'\nimport { isClient } from '@vueuse/core'\nimport {\n  hasOwn,\n  isFunction,\n  isObject,\n  isString,\n  isUndefined,\n  isVNode,\n} from '@element-plus/utils'\nimport MessageBoxConstructor from './index.vue'\n\nimport type { AppContext, ComponentPublicInstance, VNode } from 'vue'\nimport type {\n  Action,\n  Callback,\n  ElMessageBoxOptions,\n  ElMessageBoxShortcutMethod,\n  IElMessageBox,\n  MessageBoxData,\n  MessageBoxState,\n} from './message-box.type'\n\n// component default merge props & data\n\nconst messageInstance = new Map<\n  ComponentPublicInstance<{ doClose: () => void }>, // marking doClose as function\n  {\n    options: any\n    callback: Callback | undefined\n    resolve: (res: any) => void\n    reject: (reason?: any) => void\n  }\n>()\n\nconst initInstance = (\n  props: any,\n  container: HTMLElement,\n  appContext: AppContext | null = null\n) => {\n  const vnode = createVNode(\n    MessageBoxConstructor,\n    props,\n    isFunction(props.message) || isVNode(props.message)\n      ? {\n          default: isFunction(props.message)\n            ? props.message\n            : () => props.message,\n        }\n      : null\n  )\n  vnode.appContext = appContext\n  render(vnode, container)\n  document.body.appendChild(container.firstElementChild!)\n  return vnode.component\n}\n\nconst genContainer = () => {\n  return document.createElement('div')\n}\n\nconst showMessage = (options: any, appContext?: AppContext | null) => {\n  const container = genContainer()\n  // Adding destruct method.\n  // when transition leaves emitting `vanish` evt. so that we can do the clean job.\n  options.onVanish = () => {\n    // not sure if this causes mem leak, need proof to verify that.\n    // maybe calling out like 1000 msg-box then close them all.\n    render(null, container)\n    messageInstance.delete(vm) // Remove vm to avoid mem leak.\n    // here we were suppose to call document.body.removeChild(container.firstElementChild)\n    // but render(null, container) did that job for us. so that we do not call that directly\n  }\n\n  options.onAction = (action: Action) => {\n    const currentMsg = messageInstance.get(vm)!\n    let resolve: Action | { value: string; action: Action }\n    if (options.showInput) {\n      resolve = { value: vm.inputValue, action }\n    } else {\n      resolve = action\n    }\n    if (options.callback) {\n      options.callback(resolve, instance.proxy)\n    } else {\n      if (action === 'cancel' || action === 'close') {\n        if (options.distinguishCancelAndClose && action !== 'cancel') {\n          currentMsg.reject('close')\n        } else {\n          currentMsg.reject('cancel')\n        }\n      } else {\n        currentMsg.resolve(resolve)\n      }\n    }\n  }\n\n  const instance = initInstance(options, container, appContext)!\n\n  // This is how we use message box programmably.\n  // Maybe consider releasing a template version?\n  // get component instance like v2.\n  const vm = instance.proxy as ComponentPublicInstance<\n    {\n      visible: boolean\n      doClose: () => void\n    } & MessageBoxState\n  >\n\n  for (const prop in options) {\n    if (hasOwn(options, prop) && !hasOwn(vm.$props, prop)) {\n      vm[prop as keyof ComponentPublicInstance] = options[prop]\n    }\n  }\n\n  // change visibility after everything is settled\n  vm.visible = true\n  return vm\n}\n\nasync function MessageBox(\n  options: ElMessageBoxOptions,\n  appContext?: AppContext | null\n): Promise<MessageBoxData>\nfunction MessageBox(\n  options: ElMessageBoxOptions | string | VNode,\n  appContext: AppContext | null = null\n): Promise<{ value: string; action: Action } | Action> {\n  if (!isClient) return Promise.reject()\n  let callback: Callback | undefined\n  if (isString(options) || isVNode(options)) {\n    options = {\n      message: options,\n    }\n  } else {\n    callback = options.callback\n  }\n\n  return new Promise((resolve, reject) => {\n    const vm = showMessage(\n      options,\n      appContext ?? (MessageBox as IElMessageBox)._context\n    )\n    // collect this vm in order to handle upcoming events.\n    messageInstance.set(vm, {\n      options,\n      callback,\n      resolve,\n      reject,\n    })\n  })\n}\n\nconst MESSAGE_BOX_VARIANTS = ['alert', 'confirm', 'prompt'] as const\nconst MESSAGE_BOX_DEFAULT_OPTS: Record<\n  typeof MESSAGE_BOX_VARIANTS[number],\n  Partial<ElMessageBoxOptions>\n> = {\n  alert: { closeOnPressEscape: false, closeOnClickModal: false },\n  confirm: { showCancelButton: true },\n  prompt: { showCancelButton: true, showInput: true },\n}\n\nMESSAGE_BOX_VARIANTS.forEach((boxType) => {\n  ;(MessageBox as IElMessageBox)[boxType] = messageBoxFactory(\n    boxType\n  ) as ElMessageBoxShortcutMethod\n})\n\nfunction messageBoxFactory(boxType: typeof MESSAGE_BOX_VARIANTS[number]) {\n  return (\n    message: string | VNode,\n    title: string | ElMessageBoxOptions,\n    options?: ElMessageBoxOptions,\n    appContext?: AppContext | null\n  ) => {\n    let titleOrOpts = ''\n    if (isObject(title)) {\n      options = title as ElMessageBoxOptions\n      titleOrOpts = ''\n    } else if (isUndefined(title)) {\n      titleOrOpts = ''\n    } else {\n      titleOrOpts = title as string\n    }\n\n    return MessageBox(\n      Object.assign(\n        {\n          title: titleOrOpts,\n          message,\n          type: '',\n          ...MESSAGE_BOX_DEFAULT_OPTS[boxType],\n        },\n        options,\n        {\n          boxType,\n        }\n      ),\n      appContext\n    )\n  }\n}\n\nMessageBox.close = () => {\n  // instance.setupInstall.doClose()\n  // instance.setupInstall.state.visible = false\n\n  messageInstance.forEach((_, vm) => {\n    vm.doClose()\n  })\n\n  messageInstance.clear()\n}\n;(MessageBox as IElMessageBox)._context = null\n\nexport default MessageBox as IElMessageBox\n"]},"metadata":{},"sourceType":"module"}