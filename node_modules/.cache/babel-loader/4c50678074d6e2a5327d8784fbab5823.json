{"ast":null,"code":"import { renderSlot as _renderSlot, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    onClick: _cache[0] || (_cache[0] = () => {\n      _ctx.console.log('sdfsd');\n    })\n  }, [_renderSlot(_ctx.$slots, \"default\")]);\n}","map":{"version":3,"mappings":";;uBACEA,oBAEM;IAFAC,OAAK;MAAQC,YAAO,CAACC,GAAG;IAAA;MAC5BC,YAAaF","names":["_createElementBlock","onClick","_ctx","log","_renderSlot"],"sourceRoot":"","sources":["/Users/jadenvanrijswijk/Desktop/Programming files/IntelliJ/Assignment1-Trains/smartship-ewa-1/node_modules/@fawmi/vue-google-maps/src/components/marker.vue"],"sourcesContent":["<template>\n  <div @click=\"()=> {console.log('sdfsd')}\">\n    <slot></slot>\n  </div>\n</template>\n<script>\n\nimport buildComponent from './build-component.js'\n\nconst props = {\n  animation: {\n    twoWay: true,\n    type: Number,\n  },\n  attribution: {\n    type: Object,\n  },\n  clickable: {\n    type: Boolean,\n    twoWay: true,\n    default: true,\n  },\n  cursor: {\n    type: String,\n    twoWay: true,\n  },\n  draggable: {\n    type: Boolean,\n    twoWay: true,\n    default: false,\n  },\n  icon: {\n    twoWay: true,\n  },\n  label: {},\n  opacity: {\n    type: Number,\n    default: 1,\n  },\n  options: {\n    type: Object,\n  },\n  place: {\n    type: Object,\n  },\n  position: {\n    type: Object,\n    twoWay: true,\n  },\n  shape: {\n    type: Object,\n    twoWay: true,\n  },\n  title: {\n    type: String,\n    twoWay: true,\n  },\n  zIndex: {\n    type: Number,\n    twoWay: true,\n  },\n  visible: {\n    twoWay: true,\n    default: true,\n  },\n}\n\nconst events = [\n  'click',\n  'rightclick',\n  'dblclick',\n  'drag',\n  'dragstart',\n  'dragend',\n  'mouseup',\n  'mousedown',\n  'mouseover',\n  'mouseout',\n]\n\nexport default buildComponent({\n  mappedProps: props,\n  events,\n  name: 'marker',\n  ctr: () => google.maps.Marker,\n\n  inject: {\n    $clusterPromise: {\n      default: null,\n    },\n  },\n  emits: events,\n  unmounted() {\n    if (!this.$markerObject) {\n      return\n    }\n\n    if (this.$clusterObject) {\n      // Repaint will be performed in `updated()` of cluster\n      this.$clusterObject.removeMarker(this.$markerObject, true)\n    } else {\n      this.$markerObject.setMap(null)\n    }\n  },\n\n  beforeCreate(options) {\n    if (this.$clusterPromise) {\n      options.map = null\n    }\n\n    return this.$clusterPromise\n  },\n\n  afterCreate(inst) {\n    events.forEach((event)=> {\n      inst.addListener(event, (payload)=> {\n        this.$emit(event, payload)\n      });\n    })\n    if (this.$clusterPromise) {\n      this.$clusterPromise.then((co) => {\n        this.$clusterObject = co\n        co.addMarker(inst)\n      })\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}