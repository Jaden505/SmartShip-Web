{"ast":null,"code":"import { bindProps, getPropsValues } from '../utils/bindProps.js';\nimport downArrowSimulator from '../utils/simulateArrowDown.js';\nimport { mappedPropsToVueProps } from './build-component';\nconst mappedProps = {\n  bounds: {\n    type: Object\n  },\n  componentRestrictions: {\n    type: Object,\n    // Do not bind -- must check for undefined\n    // in the property\n    noBind: true\n  },\n  types: {\n    type: Array,\n    default: function () {\n      return [];\n    }\n  }\n};\nconst props = {\n  selectFirstOnEnter: {\n    required: false,\n    type: Boolean,\n    default: false\n  },\n  options: {\n    type: Object\n  }\n};\nexport default {\n  mounted() {\n    this.$gmapApiPromiseLazy().then(() => {\n      if (this.selectFirstOnEnter) {\n        downArrowSimulator(this.$refs.input);\n      }\n      if (typeof google.maps.places.Autocomplete !== 'function') {\n        throw new Error(\"google.maps.places.Autocomplete is undefined. Did you add 'places' to libraries when loading Google Maps?\");\n      }\n\n      /* eslint-disable no-unused-vars */\n      const finalOptions = {\n        ...getPropsValues(this, mappedProps),\n        ...this.options\n      };\n      this.$autocomplete = new google.maps.places.Autocomplete(this.$refs.input, finalOptions);\n      bindProps(this, this.$autocomplete, mappedProps);\n      this.$watch('componentRestrictions', v => {\n        if (v !== undefined) {\n          this.$autocomplete.setComponentRestrictions(v);\n        }\n      });\n\n      // Not using `bindEvents` because we also want\n      // to return the result of `getPlace()`\n      this.$autocomplete.addListener('place_changed', () => {\n        this.$emit('place_changed', this.$autocomplete.getPlace());\n      });\n    });\n  },\n  props: {\n    ...mappedPropsToVueProps(mappedProps),\n    ...props\n  }\n};","map":{"version":3,"mappings":"AAKA,SAASA,SAAS,EAAEC,cAAa,QAAS,uBAAsB;AAChE,OAAOC,kBAAiB,MAAO,+BAA8B;AAC7D,SAASC,qBAAoB,QAAS,mBAAkB;AAExD,MAAMC,WAAU,GAAI;EAClBC,MAAM,EAAE;IACNC,IAAI,EAAEC;EACR,CAAC;EACDC,qBAAqB,EAAE;IACrBF,IAAI,EAAEC,MAAM;IACZ;IACA;IACAE,MAAM,EAAE;EACV,CAAC;EACDC,KAAK,EAAE;IACLJ,IAAI,EAAEK,KAAK;IACXC,OAAO,EAAE,YAAY;MACnB,OAAO,EAAC;IACV;EACF;AACF;AAEA,MAAMC,KAAI,GAAI;EACZC,kBAAkB,EAAE;IAClBC,QAAQ,EAAE,KAAK;IACfT,IAAI,EAAEU,OAAO;IACbJ,OAAO,EAAE;EACX,CAAC;EACDK,OAAO,EAAE;IACPX,IAAI,EAAEC;EACR;AACF;AAEA,eAAe;EACbW,OAAO,GAAG;IACR,IAAI,CAACC,mBAAmB,EAAE,CAACC,IAAI,CAAC,MAAM;MACpC,IAAI,IAAI,CAACN,kBAAkB,EAAE;QAC3BZ,kBAAkB,CAAC,IAAI,CAACmB,KAAK,CAACC,KAAK;MACrC;MAEA,IAAI,OAAOC,MAAM,CAACC,IAAI,CAACC,MAAM,CAACC,YAAW,KAAM,UAAU,EAAE;QACzD,MAAM,IAAIC,KAAK,CACb,2GAA0G,CAC5G;MACF;;MAEA;MACA,MAAMC,YAAW,GAAI;QACnB,GAAG3B,cAAc,CAAC,IAAI,EAAEG,WAAW,CAAC;QACpC,GAAG,IAAI,CAACa;MACV;MAEA,IAAI,CAACY,aAAY,GAAI,IAAIN,MAAM,CAACC,IAAI,CAACC,MAAM,CAACC,YAAY,CAAC,IAAI,CAACL,KAAK,CAACC,KAAK,EAAEM,YAAY;MACvF5B,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC6B,aAAa,EAAEzB,WAAW;MAE/C,IAAI,CAAC0B,MAAM,CAAC,uBAAuB,EAAGC,CAAC,IAAK;QAC1C,IAAIA,MAAMC,SAAS,EAAE;UACnB,IAAI,CAACH,aAAa,CAACI,wBAAwB,CAACF,CAAC;QAC/C;MACF,CAAC;;MAED;MACA;MACA,IAAI,CAACF,aAAa,CAACK,WAAW,CAAC,eAAe,EAAE,MAAM;QACpD,IAAI,CAACC,KAAK,CAAC,eAAe,EAAE,IAAI,CAACN,aAAa,CAACO,QAAQ,EAAE;MAC3D,CAAC;IACH,CAAC;EACH,CAAC;EACDvB,KAAK,EAAE;IACL,GAAGV,qBAAqB,CAACC,WAAW,CAAC;IACrC,GAAGS;EACL;AACF","names":["bindProps","getPropsValues","downArrowSimulator","mappedPropsToVueProps","mappedProps","bounds","type","Object","componentRestrictions","noBind","types","Array","default","props","selectFirstOnEnter","required","Boolean","options","mounted","$gmapApiPromiseLazy","then","$refs","input","google","maps","places","Autocomplete","Error","finalOptions","$autocomplete","$watch","v","undefined","setComponentRestrictions","addListener","$emit","getPlace"],"sourceRoot":"","sources":["/Users/jadenvanrijswijk/Desktop/Programming files/IntelliJ/Assignment1-Trains/smartship-ewa-1/node_modules/@fawmi/vue-google-maps/src/components/autocomplete.vue"],"sourcesContent":["<template>\n  <input ref=\"input\" v-bind=\"$attrs\" v-on=\"$attrs\" />\n</template>\n\n<script>\nimport { bindProps, getPropsValues } from '../utils/bindProps.js'\nimport downArrowSimulator from '../utils/simulateArrowDown.js'\nimport { mappedPropsToVueProps } from './build-component'\n\nconst mappedProps = {\n  bounds: {\n    type: Object,\n  },\n  componentRestrictions: {\n    type: Object,\n    // Do not bind -- must check for undefined\n    // in the property\n    noBind: true,\n  },\n  types: {\n    type: Array,\n    default: function () {\n      return []\n    },\n  },\n}\n\nconst props = {\n  selectFirstOnEnter: {\n    required: false,\n    type: Boolean,\n    default: false,\n  },\n  options: {\n    type: Object,\n  },\n}\n\nexport default {\n  mounted() {\n    this.$gmapApiPromiseLazy().then(() => {\n      if (this.selectFirstOnEnter) {\n        downArrowSimulator(this.$refs.input)\n      }\n\n      if (typeof google.maps.places.Autocomplete !== 'function') {\n        throw new Error(\n          \"google.maps.places.Autocomplete is undefined. Did you add 'places' to libraries when loading Google Maps?\"\n        )\n      }\n\n      /* eslint-disable no-unused-vars */\n      const finalOptions = {\n        ...getPropsValues(this, mappedProps),\n        ...this.options,\n      }\n\n      this.$autocomplete = new google.maps.places.Autocomplete(this.$refs.input, finalOptions)\n      bindProps(this, this.$autocomplete, mappedProps)\n\n      this.$watch('componentRestrictions', (v) => {\n        if (v !== undefined) {\n          this.$autocomplete.setComponentRestrictions(v)\n        }\n      })\n\n      // Not using `bindEvents` because we also want\n      // to return the result of `getPlace()`\n      this.$autocomplete.addListener('place_changed', () => {\n        this.$emit('place_changed', this.$autocomplete.getPlace())\n      })\n    })\n  },\n  props: {\n    ...mappedPropsToVueProps(mappedProps),\n    ...props,\n  },\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}