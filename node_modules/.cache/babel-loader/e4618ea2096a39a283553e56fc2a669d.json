{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport buildComponent from './build-component.js';\nconst props = {\n  draggable: {\n    type: Boolean\n  },\n  editable: {\n    type: Boolean\n  },\n  options: {\n    type: Object\n  },\n  path: {\n    type: Array,\n    twoWay: true,\n    noBind: true\n  },\n  paths: {\n    type: Array,\n    twoWay: true,\n    noBind: true\n  }\n};\nconst events = ['click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'];\nexport default buildComponent({\n  props: {\n    deepWatch: {\n      type: Boolean,\n      default: false\n    }\n  },\n  events,\n  mappedProps: props,\n  name: 'polygon',\n  ctr: () => google.maps.Polygon,\n  beforeCreate(options) {\n    if (!options.path) delete options.path;\n    if (!options.paths) delete options.paths;\n  },\n  afterCreate(inst) {\n    let clearEvents = () => {};\n\n    // Watch paths, on our own, because we do not want to set either when it is\n    // empty\n    this.$watch('paths', paths => {\n      if (paths) {\n        clearEvents();\n        inst.setPaths(paths);\n        const updatePaths = () => {\n          this.$emit('paths_changed', inst.getPaths());\n        };\n        const eventListeners = [];\n        const mvcArray = inst.getPaths();\n        for (let i = 0; i < mvcArray.getLength(); i++) {\n          let mvcPath = mvcArray.getAt(i);\n          eventListeners.push([mvcPath, mvcPath.addListener('insert_at', updatePaths)]);\n          eventListeners.push([mvcPath, mvcPath.addListener('remove_at', updatePaths)]);\n          eventListeners.push([mvcPath, mvcPath.addListener('set_at', updatePaths)]);\n        }\n        eventListeners.push([mvcArray, mvcArray.addListener('insert_at', updatePaths)]);\n        eventListeners.push([mvcArray, mvcArray.addListener('remove_at', updatePaths)]);\n        eventListeners.push([mvcArray, mvcArray.addListener('set_at', updatePaths)]);\n        clearEvents = () => {\n          eventListeners.map(([obj, listenerHandle] // eslint-disable-line no-unused-vars\n          ) => google.maps.event.removeListener(listenerHandle));\n        };\n      }\n    }, {\n      deep: this.deepWatch,\n      immediate: true\n    });\n    this.$watch('path', path => {\n      if (path) {\n        clearEvents();\n        inst.setPaths(path);\n        const mvcPath = inst.getPath();\n        const eventListeners = [];\n        const updatePaths = () => {\n          this.$emit('path_changed', inst.getPath());\n        };\n        eventListeners.push([mvcPath, mvcPath.addListener('insert_at', updatePaths)]);\n        eventListeners.push([mvcPath, mvcPath.addListener('remove_at', updatePaths)]);\n        eventListeners.push([mvcPath, mvcPath.addListener('set_at', updatePaths)]);\n        clearEvents = () => {\n          eventListeners.map(([obj, listenerHandle] // eslint-disable-line no-unused-vars\n          ) => google.maps.event.removeListener(listenerHandle));\n        };\n      }\n    }, {\n      deep: this.deepWatch,\n      immediate: true\n    });\n  }\n});","map":{"version":3,"names":["buildComponent","props","draggable","type","Boolean","editable","options","Object","path","Array","twoWay","noBind","paths","events","deepWatch","default","mappedProps","name","ctr","google","maps","Polygon","beforeCreate","afterCreate","inst","clearEvents","$watch","setPaths","updatePaths","$emit","getPaths","eventListeners","mvcArray","i","getLength","mvcPath","getAt","push","addListener","map","obj","listenerHandle","event","removeListener","deep","immediate","getPath"],"sources":["/Users/jadenvanrijswijk/Desktop/Programming files/IntelliJ/Assignment1-Trains/smartship-ewa-1/node_modules/@fawmi/vue-google-maps/src/components/polygon.js"],"sourcesContent":["import buildComponent from './build-component.js'\n\nconst props = {\n  draggable: {\n    type: Boolean,\n  },\n  editable: {\n    type: Boolean,\n  },\n  options: {\n    type: Object,\n  },\n  path: {\n    type: Array,\n    twoWay: true,\n    noBind: true,\n  },\n  paths: {\n    type: Array,\n    twoWay: true,\n    noBind: true,\n  },\n}\n\nconst events = [\n  'click',\n  'dblclick',\n  'drag',\n  'dragend',\n  'dragstart',\n  'mousedown',\n  'mousemove',\n  'mouseout',\n  'mouseover',\n  'mouseup',\n  'rightclick',\n]\n\nexport default buildComponent({\n  props: {\n    deepWatch: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  events,\n  mappedProps: props,\n  name: 'polygon',\n  ctr: () => google.maps.Polygon,\n\n  beforeCreate(options) {\n    if (!options.path) delete options.path\n    if (!options.paths) delete options.paths\n  },\n\n  afterCreate(inst) {\n    let clearEvents = () => {}\n\n    // Watch paths, on our own, because we do not want to set either when it is\n    // empty\n    this.$watch(\n      'paths',\n      (paths) => {\n        if (paths) {\n          clearEvents()\n\n          inst.setPaths(paths)\n\n          const updatePaths = () => {\n            this.$emit('paths_changed', inst.getPaths())\n          }\n          const eventListeners = []\n\n          const mvcArray = inst.getPaths()\n          for (let i = 0; i < mvcArray.getLength(); i++) {\n            let mvcPath = mvcArray.getAt(i)\n            eventListeners.push([mvcPath, mvcPath.addListener('insert_at', updatePaths)])\n            eventListeners.push([mvcPath, mvcPath.addListener('remove_at', updatePaths)])\n            eventListeners.push([mvcPath, mvcPath.addListener('set_at', updatePaths)])\n          }\n          eventListeners.push([mvcArray, mvcArray.addListener('insert_at', updatePaths)])\n          eventListeners.push([mvcArray, mvcArray.addListener('remove_at', updatePaths)])\n          eventListeners.push([mvcArray, mvcArray.addListener('set_at', updatePaths)])\n\n          clearEvents = () => {\n            eventListeners.map((\n              [obj, listenerHandle] // eslint-disable-line no-unused-vars\n            ) => google.maps.event.removeListener(listenerHandle))\n          }\n        }\n      },\n      {\n        deep: this.deepWatch,\n        immediate: true,\n      }\n    )\n\n    this.$watch(\n      'path',\n      (path) => {\n        if (path) {\n          clearEvents()\n\n          inst.setPaths(path)\n\n          const mvcPath = inst.getPath()\n          const eventListeners = []\n\n          const updatePaths = () => {\n            this.$emit('path_changed', inst.getPath())\n          }\n\n          eventListeners.push([mvcPath, mvcPath.addListener('insert_at', updatePaths)])\n          eventListeners.push([mvcPath, mvcPath.addListener('remove_at', updatePaths)])\n          eventListeners.push([mvcPath, mvcPath.addListener('set_at', updatePaths)])\n\n          clearEvents = () => {\n            eventListeners.map((\n              [obj, listenerHandle] // eslint-disable-line no-unused-vars\n            ) => google.maps.event.removeListener(listenerHandle))\n          }\n        }\n      },\n      {\n        deep: this.deepWatch,\n        immediate: true,\n      }\n    )\n  },\n})\n"],"mappings":";AAAA,OAAOA,cAAc,MAAM,sBAAsB;AAEjD,MAAMC,KAAK,GAAG;EACZC,SAAS,EAAE;IACTC,IAAI,EAAEC;EACR,CAAC;EACDC,QAAQ,EAAE;IACRF,IAAI,EAAEC;EACR,CAAC;EACDE,OAAO,EAAE;IACPH,IAAI,EAAEI;EACR,CAAC;EACDC,IAAI,EAAE;IACJL,IAAI,EAAEM,KAAK;IACXC,MAAM,EAAE,IAAI;IACZC,MAAM,EAAE;EACV,CAAC;EACDC,KAAK,EAAE;IACLT,IAAI,EAAEM,KAAK;IACXC,MAAM,EAAE,IAAI;IACZC,MAAM,EAAE;EACV;AACF,CAAC;AAED,MAAME,MAAM,GAAG,CACb,OAAO,EACP,UAAU,EACV,MAAM,EACN,SAAS,EACT,WAAW,EACX,WAAW,EACX,WAAW,EACX,UAAU,EACV,WAAW,EACX,SAAS,EACT,YAAY,CACb;AAED,eAAeb,cAAc,CAAC;EAC5BC,KAAK,EAAE;IACLa,SAAS,EAAE;MACTX,IAAI,EAAEC,OAAO;MACbW,OAAO,EAAE;IACX;EACF,CAAC;EACDF,MAAM;EACNG,WAAW,EAAEf,KAAK;EAClBgB,IAAI,EAAE,SAAS;EACfC,GAAG,EAAE,MAAMC,MAAM,CAACC,IAAI,CAACC,OAAO;EAE9BC,YAAY,CAAChB,OAAO,EAAE;IACpB,IAAI,CAACA,OAAO,CAACE,IAAI,EAAE,OAAOF,OAAO,CAACE,IAAI;IACtC,IAAI,CAACF,OAAO,CAACM,KAAK,EAAE,OAAON,OAAO,CAACM,KAAK;EAC1C,CAAC;EAEDW,WAAW,CAACC,IAAI,EAAE;IAChB,IAAIC,WAAW,GAAG,MAAM,CAAC,CAAC;;IAE1B;IACA;IACA,IAAI,CAACC,MAAM,CACT,OAAO,EACNd,KAAK,IAAK;MACT,IAAIA,KAAK,EAAE;QACTa,WAAW,EAAE;QAEbD,IAAI,CAACG,QAAQ,CAACf,KAAK,CAAC;QAEpB,MAAMgB,WAAW,GAAG,MAAM;UACxB,IAAI,CAACC,KAAK,CAAC,eAAe,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC;QAC9C,CAAC;QACD,MAAMC,cAAc,GAAG,EAAE;QAEzB,MAAMC,QAAQ,GAAGR,IAAI,CAACM,QAAQ,EAAE;QAChC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,CAACE,SAAS,EAAE,EAAED,CAAC,EAAE,EAAE;UAC7C,IAAIE,OAAO,GAAGH,QAAQ,CAACI,KAAK,CAACH,CAAC,CAAC;UAC/BF,cAAc,CAACM,IAAI,CAAC,CAACF,OAAO,EAAEA,OAAO,CAACG,WAAW,CAAC,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC;UAC7EG,cAAc,CAACM,IAAI,CAAC,CAACF,OAAO,EAAEA,OAAO,CAACG,WAAW,CAAC,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC;UAC7EG,cAAc,CAACM,IAAI,CAAC,CAACF,OAAO,EAAEA,OAAO,CAACG,WAAW,CAAC,QAAQ,EAAEV,WAAW,CAAC,CAAC,CAAC;QAC5E;QACAG,cAAc,CAACM,IAAI,CAAC,CAACL,QAAQ,EAAEA,QAAQ,CAACM,WAAW,CAAC,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC;QAC/EG,cAAc,CAACM,IAAI,CAAC,CAACL,QAAQ,EAAEA,QAAQ,CAACM,WAAW,CAAC,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC;QAC/EG,cAAc,CAACM,IAAI,CAAC,CAACL,QAAQ,EAAEA,QAAQ,CAACM,WAAW,CAAC,QAAQ,EAAEV,WAAW,CAAC,CAAC,CAAC;QAE5EH,WAAW,GAAG,MAAM;UAClBM,cAAc,CAACQ,GAAG,CAAC,CACjB,CAACC,GAAG,EAAEC,cAAc,CAAC,CAAC;UAAA,KACnBtB,MAAM,CAACC,IAAI,CAACsB,KAAK,CAACC,cAAc,CAACF,cAAc,CAAC,CAAC;QACxD,CAAC;MACH;IACF,CAAC,EACD;MACEG,IAAI,EAAE,IAAI,CAAC9B,SAAS;MACpB+B,SAAS,EAAE;IACb,CAAC,CACF;IAED,IAAI,CAACnB,MAAM,CACT,MAAM,EACLlB,IAAI,IAAK;MACR,IAAIA,IAAI,EAAE;QACRiB,WAAW,EAAE;QAEbD,IAAI,CAACG,QAAQ,CAACnB,IAAI,CAAC;QAEnB,MAAM2B,OAAO,GAAGX,IAAI,CAACsB,OAAO,EAAE;QAC9B,MAAMf,cAAc,GAAG,EAAE;QAEzB,MAAMH,WAAW,GAAG,MAAM;UACxB,IAAI,CAACC,KAAK,CAAC,cAAc,EAAEL,IAAI,CAACsB,OAAO,EAAE,CAAC;QAC5C,CAAC;QAEDf,cAAc,CAACM,IAAI,CAAC,CAACF,OAAO,EAAEA,OAAO,CAACG,WAAW,CAAC,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC;QAC7EG,cAAc,CAACM,IAAI,CAAC,CAACF,OAAO,EAAEA,OAAO,CAACG,WAAW,CAAC,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC;QAC7EG,cAAc,CAACM,IAAI,CAAC,CAACF,OAAO,EAAEA,OAAO,CAACG,WAAW,CAAC,QAAQ,EAAEV,WAAW,CAAC,CAAC,CAAC;QAE1EH,WAAW,GAAG,MAAM;UAClBM,cAAc,CAACQ,GAAG,CAAC,CACjB,CAACC,GAAG,EAAEC,cAAc,CAAC,CAAC;UAAA,KACnBtB,MAAM,CAACC,IAAI,CAACsB,KAAK,CAACC,cAAc,CAACF,cAAc,CAAC,CAAC;QACxD,CAAC;MACH;IACF,CAAC,EACD;MACEG,IAAI,EAAE,IAAI,CAAC9B,SAAS;MACpB+B,SAAS,EAAE;IACb,CAAC,CACF;EACH;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}