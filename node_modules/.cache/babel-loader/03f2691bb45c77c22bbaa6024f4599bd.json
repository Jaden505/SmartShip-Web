{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, onMounted, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElColorHueSlider\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    },\n    vertical: Boolean\n  },\n  setup(props) {\n    const ns = useNamespace(\"color-hue-slider\");\n    const instance = getCurrentInstance();\n    const thumb = ref(null);\n    const bar = ref(null);\n    const thumbLeft = ref(0);\n    const thumbTop = ref(0);\n    const hueValue = computed(() => {\n      return props.color.get(\"hue\");\n    });\n    watch(() => hueValue.value, () => {\n      update();\n    });\n    function handleClick(event) {\n      const target = event.target;\n      if (target !== thumb.value) {\n        handleDrag(event);\n      }\n    }\n    function handleDrag(event) {\n      const el = instance.vnode.el;\n      const rect = el.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n      let hue;\n      if (!props.vertical) {\n        let left = clientX - rect.left;\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n        left = Math.max(thumb.value.offsetWidth / 2, left);\n        hue = Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 360);\n      } else {\n        let top = clientY - rect.top;\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n        top = Math.max(thumb.value.offsetHeight / 2, top);\n        hue = Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 360);\n      }\n      props.color.set(\"hue\", hue);\n    }\n    function getThumbLeft() {\n      const el = instance.vnode.el;\n      if (props.vertical) return 0;\n      const hue = props.color.get(\"hue\");\n      if (!el) return 0;\n      return Math.round(hue * (el.offsetWidth - thumb.value.offsetWidth / 2) / 360);\n    }\n    function getThumbTop() {\n      const el = instance.vnode.el;\n      if (!props.vertical) return 0;\n      const hue = props.color.get(\"hue\");\n      if (!el) return 0;\n      return Math.round(hue * (el.offsetHeight - thumb.value.offsetHeight / 2) / 360);\n    }\n    function update() {\n      thumbLeft.value = getThumbLeft();\n      thumbTop.value = getThumbTop();\n    }\n    onMounted(() => {\n      const dragConfig = {\n        drag: event => {\n          handleDrag(event);\n        },\n        end: event => {\n          handleDrag(event);\n        }\n      };\n      draggable(bar.value, dragConfig);\n      draggable(thumb.value, dragConfig);\n      update();\n    });\n    return {\n      bar,\n      thumb,\n      thumbLeft,\n      thumbTop,\n      hueValue,\n      handleClick,\n      update,\n      ns\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"vertical\", _ctx.vertical)])\n  }, [createElementVNode(\"div\", {\n    ref: \"bar\",\n    class: normalizeClass(_ctx.ns.e(\"bar\")),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, null, 2), createElementVNode(\"div\", {\n    ref: \"thumb\",\n    class: normalizeClass(_ctx.ns.e(\"thumb\")),\n    style: normalizeStyle({\n      left: _ctx.thumbLeft + \"px\",\n      top: _ctx.thumbTop + \"px\"\n    })\n  }, null, 6)], 2);\n}\nvar HueSlider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/hue-slider.vue\"]]);\nexport { HueSlider as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","color","type","required","vertical","setup","useNamespace","instance","getCurrentInstance","ref","computed","watch","hueValue","update","event","target","thumb","value","handleDrag","vnode","el","getBoundingClientRect","clientX","clientY","rect","left","min","width","offsetWidth","Math","max","hue","top","height","offsetHeight","set","round","thumbLeft","getThumbLeft","thumbTop","getThumbTop","onMounted","dragConfig","drag","end","draggable","bar","handleClick","ns","_createElementBlock","class","_normalizeClass","_ctx","_createElementVNode","e","onClick","_cache","style"],"sources":["../../../../../../../packages/components/color-picker/src/components/hue-slider.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b(), ns.is('vertical', vertical)]\">\n    <div ref=\"bar\" :class=\"ns.e('bar')\" @click=\"handleClick\" />\n    <div\n      ref=\"thumb\"\n      :class=\"ns.e('thumb')\"\n      :style=\"{\n        left: thumbLeft + 'px',\n        top: thumbTop + 'px',\n      }\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { getClientXY } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElColorHueSlider',\n\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n\n    vertical: Boolean,\n  },\n  setup(props) {\n    const ns = useNamespace('color-hue-slider')\n    const instance = getCurrentInstance()\n    // ref\n    const thumb = ref<HTMLElement | null>(null)\n    const bar = ref<HTMLElement | null>(null)\n    // data\n    const thumbLeft = ref(0)\n    const thumbTop = ref(0)\n    // computed\n    const hueValue = computed(() => {\n      return props.color.get('hue')\n    })\n    // watch\n    watch(\n      () => hueValue.value,\n      () => {\n        update()\n      }\n    )\n\n    // methods\n    function handleClick(event: Event) {\n      const target = event.target\n\n      if (target !== thumb.value) {\n        handleDrag(event)\n      }\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el as HTMLElement\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n      let hue\n\n      if (!props.vertical) {\n        let left = clientX - rect.left\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2)\n        left = Math.max(thumb.value.offsetWidth / 2, left)\n\n        hue = Math.round(\n          ((left - thumb.value.offsetWidth / 2) /\n            (rect.width - thumb.value.offsetWidth)) *\n            360\n        )\n      } else {\n        let top = clientY - rect.top\n\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2)\n        top = Math.max(thumb.value.offsetHeight / 2, top)\n        hue = Math.round(\n          ((top - thumb.value.offsetHeight / 2) /\n            (rect.height - thumb.value.offsetHeight)) *\n            360\n        )\n      }\n      props.color.set('hue', hue)\n    }\n\n    function getThumbLeft() {\n      const el = instance.vnode.el\n\n      if (props.vertical) return 0\n      const hue = props.color.get('hue')\n\n      if (!el) return 0\n      return Math.round(\n        (hue * (el.offsetWidth - thumb.value.offsetWidth / 2)) / 360\n      )\n    }\n\n    function getThumbTop() {\n      const el = instance.vnode.el as HTMLElement\n      if (!props.vertical) return 0\n      const hue = props.color.get('hue')\n\n      if (!el) return 0\n      return Math.round(\n        (hue * (el.offsetHeight - thumb.value.offsetHeight / 2)) / 360\n      )\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft()\n      thumbTop.value = getThumbTop()\n    }\n\n    // mounded\n    onMounted(() => {\n      const dragConfig = {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      }\n\n      draggable(bar.value, dragConfig)\n      draggable(thumb.value, dragConfig)\n      update()\n    })\n\n    return {\n      bar,\n      thumb,\n      thumbLeft,\n      thumbTop,\n      hueValue,\n      handleClick,\n      update,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}