{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, nextTick, provide, createVNode, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Plus } from '@element-plus/icons-vue';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport TabNav from './tab-nav.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { isString } from '@vue/shared';\nimport { isNumber } from '@vueuse/core';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { tabsRootContextKey } from '../../../tokens/tabs.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst tabsProps = buildProps({\n  type: {\n    type: String,\n    values: [\"card\", \"border-card\", \"\"],\n    default: \"\"\n  },\n  activeName: {\n    type: [String, Number]\n  },\n  closable: Boolean,\n  addable: Boolean,\n  modelValue: {\n    type: [String, Number]\n  },\n  editable: Boolean,\n  tabPosition: {\n    type: String,\n    values: [\"top\", \"right\", \"bottom\", \"left\"],\n    default: \"top\"\n  },\n  beforeLeave: {\n    type: definePropType(Function),\n    default: () => true\n  },\n  stretch: Boolean\n});\nconst isPanelName = value => isString(value) || isNumber(value);\nconst tabsEmits = {\n  [UPDATE_MODEL_EVENT]: name => isPanelName(name),\n  tabClick: (pane, ev) => ev instanceof Event,\n  tabChange: name => isPanelName(name),\n  edit: (paneName, action) => [\"remove\", \"add\"].includes(action),\n  tabRemove: name => isPanelName(name),\n  tabAdd: () => true\n};\nvar Tabs = defineComponent({\n  name: \"ElTabs\",\n  props: tabsProps,\n  emits: tabsEmits,\n  setup(props, {\n    emit,\n    slots,\n    expose\n  }) {\n    var _a, _b;\n    const ns = useNamespace(\"tabs\");\n    const nav$ = ref();\n    const panes = reactive({});\n    const currentName = ref((_b = (_a = props.modelValue) != null ? _a : props.activeName) != null ? _b : \"0\");\n    const changeCurrentName = value => {\n      currentName.value = value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"tabChange\", value);\n    };\n    const setCurrentName = async value => {\n      var _a2, _b2, _c;\n      if (currentName.value === value || isUndefined(value)) return;\n      try {\n        const canLeave = await ((_a2 = props.beforeLeave) == null ? void 0 : _a2.call(props, value, currentName.value));\n        if (canLeave !== false) {\n          changeCurrentName(value);\n          (_c = (_b2 = nav$.value) == null ? void 0 : _b2.removeFocus) == null ? void 0 : _c.call(_b2);\n        }\n      } catch (e) {}\n    };\n    const handleTabClick = (tab, tabName, event) => {\n      if (tab.props.disabled) return;\n      setCurrentName(tabName);\n      emit(\"tabClick\", tab, event);\n    };\n    const handleTabRemove = (pane, ev) => {\n      if (pane.props.disabled || isUndefined(pane.props.name)) return;\n      ev.stopPropagation();\n      emit(\"edit\", pane.props.name, \"remove\");\n      emit(\"tabRemove\", pane.props.name);\n    };\n    const handleTabAdd = () => {\n      emit(\"edit\", void 0, \"add\");\n      emit(\"tabAdd\");\n    };\n    useDeprecated({\n      from: '\"activeName\"',\n      replacement: '\"model-value\" or \"v-model\"',\n      scope: \"ElTabs\",\n      version: \"2.3.0\",\n      ref: \"https://element-plus.org/en-US/component/tabs.html#attributes\",\n      type: \"Attribute\"\n    }, computed(() => !!props.activeName));\n    watch(() => props.activeName, modelValue => setCurrentName(modelValue));\n    watch(() => props.modelValue, modelValue => setCurrentName(modelValue));\n    watch(currentName, async () => {\n      var _a2;\n      await nextTick();\n      (_a2 = nav$.value) == null ? void 0 : _a2.scrollToActiveTab();\n    });\n    {\n      const registerPane = pane => panes[pane.uid] = pane;\n      const unregisterPane = uid => delete panes[uid];\n      provide(tabsRootContextKey, {\n        props,\n        currentName,\n        registerPane,\n        unregisterPane\n      });\n    }\n    expose({\n      currentName\n    });\n    return () => {\n      const newButton = props.editable || props.addable ? createVNode(\"span\", {\n        \"class\": ns.e(\"new-tab\"),\n        \"tabindex\": \"0\",\n        \"onClick\": handleTabAdd,\n        \"onKeydown\": ev => {\n          if (ev.code === EVENT_CODE.enter) handleTabAdd();\n        }\n      }, [createVNode(ElIcon, {\n        \"class\": ns.is(\"icon-plus\")\n      }, {\n        default: () => [createVNode(Plus, null, null)]\n      })]) : null;\n      const header = createVNode(\"div\", {\n        \"class\": [ns.e(\"header\"), ns.is(props.tabPosition)]\n      }, [newButton, createVNode(TabNav, {\n        \"ref\": nav$,\n        \"currentName\": currentName.value,\n        \"editable\": props.editable,\n        \"type\": props.type,\n        \"panes\": Object.values(panes),\n        \"stretch\": props.stretch,\n        \"onTabClick\": handleTabClick,\n        \"onTabRemove\": handleTabRemove\n      }, null)]);\n      const panels = createVNode(\"div\", {\n        \"class\": ns.e(\"content\")\n      }, [renderSlot(slots, \"default\")]);\n      return createVNode(\"div\", {\n        \"class\": [ns.b(), ns.m(props.tabPosition), {\n          [ns.m(\"card\")]: props.type === \"card\",\n          [ns.m(\"border-card\")]: props.type === \"border-card\"\n        }]\n      }, [...(props.tabPosition !== \"bottom\" ? [header, panels] : [panels, header])]);\n    };\n  }\n});\nexport { Tabs as default, tabsEmits, tabsProps };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AA+BaA,eAAS,GAAGC,UAAU,CAAC;EAClCC,IAAI,EAAE;IACJA,IAAI,EAAEC,MADF;IAEJC,MAAM,EAAE,CAAC,MAAD,EAAS,aAAT,EAAwB,EAAxB,CAFJ;IAGJC,OAAO,EAAE;GAJuB;EAMlCC,UAAU,EAAE;IACVJ,IAAI,EAAE,CAACC,MAAD,EAASI,MAAT;GAP0B;EASlCC,QAAQ,EAAEC,OATwB;EAUlCC,OAAO,EAAED,OAVyB;EAWlCE,UAAU,EAAE;IACVT,IAAI,EAAE,CAACC,MAAD,EAASI,MAAT;GAZ0B;EAclCK,QAAQ,EAAEH,OAdwB;EAelCI,WAAW,EAAE;IACXX,IAAI,EAAEC,MADK;IAEXC,MAAM,EAAE,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,EAA2B,MAA3B,CAFG;IAGXC,OAAO,EAAE;GAlBuB;EAoBlCS,WAAW,EAAE;IACXZ,IAAI,EAAEa,cAAc,CAKlBC,QALkB,CADT;IAOXX,OAAO,EAAE,MAAM;GA3BiB;EA6BlCY,OAAO,EAAER;AA7ByB,CAAD;;AAiClB,eAAG;;EAGbS,WAAMC,aAAYC;EACvBC,mBAAuBC,WAAkC;EACzDJ,IAAQ,WAAE,EAAwBE,MAAcA,gBAFzB;EAGvBC,SAAS,EAAEC,QAAmCC,gBAHvB;EAIvBC,MAAM;AAENC;AACAC,WAAcC;EAPTL;EAWPM;EACEN,OAD6BH;EAG7BS,KAAK,MAHwB;IAI7BC;;IAEKC;KAAQ;IAAQC,IAARC;IAAeF;IAAU;IACpC,MAAMG,KAAKC,GAAYC;IAEvB,MAAMC,WAAN;IACA,MAAMC,iBAAkD,GAAxDC;MACAC,WAAiB,SAAMD,KAChB;;MAGDE,uBAAqBF;;IAEzBG,MAAIC,cAACC,SAAoBL,KAAzB;MACAG,IAAIG,GAAC,SAAD;MAHN;MAMA,IAAMF;QACJ;QACIH,iBAAYD,KAAUA;;UAEtB;QACF;;IAEEE;IAGA;MACA;oBACA;MACDC;;IAEJ,MAfDI;+DAiBMC;MAKJ1B;MACAsB,IAAc,mBAAd;MACAD,IAAI,CAAC,WAAD,MAAkBM,MAAtB;KAPF;;MAUAN,IAAMI,eAAe,EAAG;MACtBJ,IAAIO,CAAI,QAAJ;IACJ5B;iBACI;MACJqB,IAAI,gBAAcO;MAJpBC;;MAOMC,gBAAY;MAChBT,KAAK,+DAAL;MACAA,IAAI;KAFN;;IAKAU,iBACE;IACEC,MAAIb,WADN;MAEEU;MACAI,cAHF;MAIEC,OAAOlB,IAJT;IAKEmB;IACArD;MAPS,MASHsD,YAAS5B,GAAKoB,IAAd,SATV;MAYAS,MACEC,cADG,UAEH,YAA8B;MAGhCD,OACE,mBADG,EAEF9C;QAGEiB;QACG+B;QAENH;QACAE;;;IAED5B,MAND;MAQAS;MACE;;MACA,MAAMmB,iBAAkBE,CAADhD,iBAA6B,QAApD;;QAEO;QACLgB,SAD0B;QAE1BW,WAF0B;UAAA,kCAI1BmB;QAJ0B;MAM7B;QAED5B,OAAO;MACLS;QADFlC;MAIA,OAAa;MACX,MAAMwD,SAASC,iBACKlC;QAAlB,SAEWK,CAAEA,EAAC8B,CAAHA,CAAK,SAAL,CAFX;MAAA;QAAA,WAIab;QAJb,aAKgB9B,EAADmB,WAAuB;kBAC5B,QAAYyB;QACjB;QAPL;QAAA,SASmB/B,EAAEL,KAAF;QATnB;QAAA;MAAA,OAaI,CAdN;;QAgBA,OAAY;MAAA,cACK,CAACmC,KAAH,WAAmBE,CAAH,EAAMrC;MADzB;QAAA,OAIDQ,EAJC;UAKOG,0BALP;UAMIX,mBANJ;SAOAA;MAPA,aAQO,YAAN,aARD;;EAAA","names":["tabsProps","buildProps","type","String","values","default","activeName","Number","closable","Boolean","addable","modelValue","editable","tabPosition","beforeLeave","definePropType","Function","stretch","tabClick","tabsEmits","ev","tabChange","name","isPanelName","edit","tabRemove","tabAdd","defineComponent","props","emits","expose","slots","_a","ns","useNamespace","reactive","nav$","panes","value","currentName","changeCurrentName","emit","setCurrentName","UPDATE_MODEL_EVENT","_a2","handleTabRemove","handleTabClick","event","pane","replacement","handleTabAdd","useDeprecated","from","scope","version","ref","registerPane","watch","unregisterPane","nextTick","uid","newButton","_createVNode","e","EVENT_CODE","is"],"sources":["../../../../../../packages/components/tabs/src/tabs.tsx"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  nextTick,\n  provide,\n  reactive,\n  ref,\n  renderSlot,\n  watch,\n} from 'vue'\nimport {\n  buildProps,\n  definePropType,\n  isNumber,\n  isString,\n  isUndefined,\n} from '@element-plus/utils'\nimport { EVENT_CODE, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport ElIcon from '@element-plus/components/icon'\nimport { Plus } from '@element-plus/icons-vue'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { useDeprecated, useNamespace } from '@element-plus/hooks'\nimport TabNav from './tab-nav'\nimport type { TabNavInstance } from './tab-nav'\nimport type { TabsPaneContext } from '@element-plus/tokens'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type { Awaitable } from '@element-plus/utils'\n\nexport type TabPanelName = string | number\n\nexport const tabsProps = buildProps({\n  type: {\n    type: String,\n    values: ['card', 'border-card', ''],\n    default: '',\n  },\n  activeName: {\n    type: [String, Number],\n  },\n  closable: Boolean,\n  addable: Boolean,\n  modelValue: {\n    type: [String, Number],\n  },\n  editable: Boolean,\n  tabPosition: {\n    type: String,\n    values: ['top', 'right', 'bottom', 'left'],\n    default: 'top',\n  },\n  beforeLeave: {\n    type: definePropType<\n      (\n        newName: TabPanelName,\n        oldName: TabPanelName\n      ) => Awaitable<void | boolean>\n    >(Function),\n    default: () => true,\n  },\n  stretch: Boolean,\n} as const)\nexport type TabsProps = ExtractPropTypes<typeof tabsProps>\n\nconst isPanelName = (value: unknown): value is string | number =>\n  isString(value) || isNumber(value)\n\nexport const tabsEmits = {\n  [UPDATE_MODEL_EVENT]: (name: TabPanelName) => isPanelName(name),\n  tabClick: (pane: TabsPaneContext, ev: Event) => ev instanceof Event,\n  tabChange: (name: TabPanelName) => isPanelName(name),\n  edit: (paneName: TabPanelName | undefined, action: 'remove' | 'add') =>\n    ['remove', 'add'].includes(action),\n  tabRemove: (name: TabPanelName) => isPanelName(name),\n  tabAdd: () => true,\n}\nexport type TabsEmits = typeof tabsEmits\n\nexport default defineComponent({\n  name: 'ElTabs',\n\n  props: tabsProps,\n  emits: tabsEmits,\n\n  setup(props, { emit, slots, expose }) {\n    const ns = useNamespace('tabs')\n\n    const nav$ = ref<TabNavInstance>()\n    const panes = reactive<Record<number, TabsPaneContext>>({})\n    const currentName = ref<TabPanelName>(\n      props.modelValue ?? props.activeName ?? '0'\n    )\n\n    const changeCurrentName = (value: TabPanelName) => {\n      currentName.value = value\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('tabChange', value)\n    }\n\n    const setCurrentName = async (value?: TabPanelName) => {\n      // should do nothing.\n      if (currentName.value === value || isUndefined(value)) return\n\n      try {\n        const canLeave = await props.beforeLeave?.(value, currentName.value)\n        if (canLeave !== false) {\n          changeCurrentName(value)\n\n          // call exposed function, Vue doesn't support expose in typescript yet.\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-expect-error\n          nav$.value?.removeFocus?.()\n        }\n      } catch {}\n    }\n\n    const handleTabClick = (\n      tab: TabsPaneContext,\n      tabName: TabPanelName,\n      event: Event\n    ) => {\n      if (tab.props.disabled) return\n      setCurrentName(tabName)\n      emit('tabClick', tab, event)\n    }\n\n    const handleTabRemove = (pane: TabsPaneContext, ev: Event) => {\n      if (pane.props.disabled || isUndefined(pane.props.name)) return\n      ev.stopPropagation()\n      emit('edit', pane.props.name, 'remove')\n      emit('tabRemove', pane.props.name)\n    }\n\n    const handleTabAdd = () => {\n      emit('edit', undefined, 'add')\n      emit('tabAdd')\n    }\n\n    useDeprecated(\n      {\n        from: '\"activeName\"',\n        replacement: '\"model-value\" or \"v-model\"',\n        scope: 'ElTabs',\n        version: '2.3.0',\n        ref: 'https://element-plus.org/en-US/component/tabs.html#attributes',\n        type: 'Attribute',\n      },\n      computed(() => !!props.activeName)\n    )\n\n    watch(\n      () => props.activeName,\n      (modelValue) => setCurrentName(modelValue)\n    )\n\n    watch(\n      () => props.modelValue,\n      (modelValue) => setCurrentName(modelValue)\n    )\n\n    watch(currentName, async () => {\n      await nextTick()\n      // call exposed function, Vue doesn't support expose in typescript yet.\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      nav$.value?.scrollToActiveTab()\n    })\n\n    {\n      const registerPane = (pane: TabsPaneContext) => (panes[pane.uid] = pane)\n      const unregisterPane = (uid: number) => delete panes[uid]\n\n      provide(tabsRootContextKey, {\n        props,\n        currentName,\n        registerPane,\n        unregisterPane,\n      })\n    }\n\n    expose({\n      currentName,\n    })\n\n    return () => {\n      const newButton =\n        props.editable || props.addable ? (\n          <span\n            class={ns.e('new-tab')}\n            tabindex=\"0\"\n            onClick={handleTabAdd}\n            onKeydown={(ev: KeyboardEvent) => {\n              if (ev.code === EVENT_CODE.enter) handleTabAdd()\n            }}\n          >\n            <ElIcon class={ns.is('icon-plus')}>\n              <Plus />\n            </ElIcon>\n          </span>\n        ) : null\n\n      const header = (\n        <div class={[ns.e('header'), ns.is(props.tabPosition)]}>\n          {newButton}\n          <TabNav\n            ref={nav$}\n            currentName={currentName.value}\n            editable={props.editable}\n            type={props.type}\n            panes={Object.values(panes)}\n            stretch={props.stretch}\n            onTabClick={handleTabClick}\n            onTabRemove={handleTabRemove}\n          />\n        </div>\n      )\n\n      const panels = (\n        <div class={ns.e('content')}>{renderSlot(slots, 'default')}</div>\n      )\n\n      return (\n        <div\n          class={[\n            ns.b(),\n            ns.m(props.tabPosition),\n            {\n              [ns.m('card')]: props.type === 'card',\n              [ns.m('border-card')]: props.type === 'border-card',\n            },\n          ]}\n        >\n          {...props.tabPosition !== 'bottom'\n            ? [header, panels]\n            : [panels, header]}\n        </div>\n      )\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}