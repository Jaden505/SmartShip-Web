{"ast":null,"code":"import lazy from './utils/lazyValue';\nimport { loadGMapApi } from './load-google-maps';\nimport { createApp } from 'vue';\nimport Polyline from './components/polyline';\nimport Polygon from './components/polygon';\nimport Circle from './components/circle';\nimport Rectangle from './components/rectangle';\nimport Marker from './components/marker.vue';\nimport GMapCluster from './components/cluster.vue';\nimport InfoWindow from './components/infoWindow.vue';\nimport Map from './components/map.vue';\nimport Heatmap from './components/heatmap';\nimport Autocomplete from './components/autocomplete.vue';\nimport MapElementMixin from './components/mapElementMixin';\nimport buildComponent from './components/build-component';\nimport MountableMixin from './utils/mountableMixin';\nimport { Env } from \"./utils/env\";\nlet GMapApi = null;\nexport { loadGMapApi, Marker, Polyline, Polygon, Circle, GMapCluster, Rectangle, InfoWindow, Map, MapElementMixin, Heatmap, buildComponent, Autocomplete, MountableMixin };\nexport default function install(Vue, options) {\n  options = {\n    installComponents: true,\n    autobindAllEvents: false,\n    ...options\n  };\n  GMapApi = createApp({\n    data: function () {\n      return {\n        gmapApi: null\n      };\n    }\n  });\n  const defaultResizeBus = createApp();\n\n  // Use a lazy to only load the API when\n  // a VGM component is loaded\n  let gmapApiPromiseLazy = makeGMapApiPromiseLazy(options);\n  Vue.mixin({\n    created() {\n      this.$gmapDefaultResizeBus = defaultResizeBus;\n      this.$gmapOptions = options;\n      this.$gmapApiPromiseLazy = gmapApiPromiseLazy;\n    }\n  });\n  Vue.$gmapDefaultResizeBus = defaultResizeBus;\n  Vue.$gmapApiPromiseLazy = gmapApiPromiseLazy;\n  if (options.installComponents) {\n    Vue.component('GMapMap', Map);\n    Vue.component('GMapMarker', Marker);\n    Vue.component('GMapInfoWindow', InfoWindow);\n    Vue.component('GMapCluster', GMapCluster);\n    Vue.component('GMapPolyline', Polyline);\n    Vue.component('GMapPolygon', Polygon);\n    Vue.component('GMapCircle', Circle);\n    Vue.component('GMapRectangle', Rectangle);\n    Vue.component('GMapAutocomplete', Autocomplete);\n    Vue.component('GMapHeatmap', Heatmap);\n  }\n}\nfunction makeGMapApiPromiseLazy(options) {\n  // Things to do once the API is loaded\n  function onApiLoaded() {\n    GMapApi.gmapApi = {};\n    return window.google;\n  }\n  if (options.load) {\n    // If library should load the API\n    return lazy(() => {\n      // Load the\n      // This will only be evaluated once\n      if (Env.isServer()) {\n        return new Promise(() => {}).then(onApiLoaded);\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            window['vueGoogleMapsInit'] = resolve;\n            loadGMapApi(options.load);\n          } catch (err) {\n            reject(err);\n          }\n        }).then(onApiLoaded);\n      }\n    });\n  } else {\n    // If library should not handle API, provide\n    // end-users with the global `vueGoogleMapsInit: () => undefined`\n    // when the Google Maps API has been loaded\n    const promise = new Promise(resolve => {\n      if (Env.isServer()) {\n        return;\n      }\n      window['vueGoogleMapsInit'] = resolve;\n    }).then(onApiLoaded);\n    return lazy(() => promise);\n  }\n}","map":{"version":3,"names":["lazy","loadGMapApi","createApp","Polyline","Polygon","Circle","Rectangle","Marker","GMapCluster","InfoWindow","Map","Heatmap","Autocomplete","MapElementMixin","buildComponent","MountableMixin","Env","GMapApi","install","Vue","options","installComponents","autobindAllEvents","data","gmapApi","defaultResizeBus","gmapApiPromiseLazy","makeGMapApiPromiseLazy","mixin","created","$gmapDefaultResizeBus","$gmapOptions","$gmapApiPromiseLazy","component","onApiLoaded","window","google","load","isServer","Promise","then","resolve","reject","err","promise"],"sources":["/Users/jadenvanrijswijk/Desktop/Programming files/IntelliJ/Assignment1-Trains/smartship-ewa-1/node_modules/@fawmi/vue-google-maps/src/main.js"],"sourcesContent":["import lazy from './utils/lazyValue'\nimport { loadGMapApi } from './load-google-maps'\nimport { createApp } from 'vue'\nimport Polyline from './components/polyline'\nimport Polygon from './components/polygon'\nimport Circle from './components/circle'\nimport Rectangle from './components/rectangle'\nimport Marker from './components/marker.vue'\nimport GMapCluster from './components/cluster.vue'\nimport InfoWindow from './components/infoWindow.vue'\nimport Map from './components/map.vue'\nimport Heatmap from './components/heatmap'\nimport Autocomplete from './components/autocomplete.vue'\n\nimport MapElementMixin from './components/mapElementMixin'\nimport buildComponent from './components/build-component'\nimport MountableMixin from './utils/mountableMixin'\nimport {Env} from \"./utils/env\";\nlet GMapApi = null;\n\nexport {\n  loadGMapApi,\n  Marker,\n  Polyline,\n  Polygon,\n  Circle,\n  GMapCluster,\n  Rectangle,\n  InfoWindow,\n  Map,\n  MapElementMixin,\n  Heatmap,\n  buildComponent,\n  Autocomplete,\n  MountableMixin,\n}\n\nexport default function install(Vue, options) {\n  options = {\n    installComponents: true,\n    autobindAllEvents: false,\n    ...options,\n  }\n\n  GMapApi = createApp({\n    data: function () {\n      return { gmapApi: null }\n    },\n  })\n\n  const defaultResizeBus = createApp()\n\n  // Use a lazy to only load the API when\n  // a VGM component is loaded\n  let gmapApiPromiseLazy = makeGMapApiPromiseLazy(options)\n\n  Vue.mixin({\n    created() {\n      this.$gmapDefaultResizeBus = defaultResizeBus\n      this.$gmapOptions = options\n      this.$gmapApiPromiseLazy = gmapApiPromiseLazy\n    },\n  })\n  Vue.$gmapDefaultResizeBus = defaultResizeBus\n  Vue.$gmapApiPromiseLazy = gmapApiPromiseLazy\n\n  if (options.installComponents) {\n    Vue.component('GMapMap', Map)\n    Vue.component('GMapMarker', Marker)\n    Vue.component('GMapInfoWindow', InfoWindow)\n    Vue.component('GMapCluster', GMapCluster)\n    Vue.component('GMapPolyline', Polyline)\n    Vue.component('GMapPolygon', Polygon)\n    Vue.component('GMapCircle', Circle)\n    Vue.component('GMapRectangle', Rectangle)\n    Vue.component('GMapAutocomplete', Autocomplete)\n    Vue.component('GMapHeatmap', Heatmap)\n  }\n}\n\nfunction makeGMapApiPromiseLazy(options) {\n  // Things to do once the API is loaded\n  function onApiLoaded() {\n    GMapApi.gmapApi = {}\n    return window.google\n  }\n\n  if (options.load) {\n    // If library should load the API\n    return lazy(() => {\n      // Load the\n      // This will only be evaluated once\n      if (Env.isServer()) {\n        return new Promise(() => {}).then(onApiLoaded)\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            window['vueGoogleMapsInit'] = resolve\n            loadGMapApi(options.load)\n          } catch (err) {\n            reject(err)\n          }\n        }).then(onApiLoaded)\n      }\n    })\n  } else {\n    // If library should not handle API, provide\n    // end-users with the global `vueGoogleMapsInit: () => undefined`\n    // when the Google Maps API has been loaded\n    const promise = new Promise((resolve) => {\n      if (Env.isServer()) {\n        return\n      }\n      window['vueGoogleMapsInit'] = resolve\n    }).then(onApiLoaded)\n\n    return lazy(() => promise)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}