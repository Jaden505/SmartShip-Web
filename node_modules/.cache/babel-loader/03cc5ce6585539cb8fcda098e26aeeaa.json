{"ast":null,"code":"export default {\n  name: \"TripStatistics\",\n  mounted() {\n    this.importGoogleMaps();\n  },\n  methods: {\n    importGoogleMaps() {\n      let recaptchaScript = document.createElement('script');\n      recaptchaScript.setAttribute('src', 'https://maps.googleapis.com/maps/api/js?sensor=false');\n      document.head.appendChild(recaptchaScript);\n    },\n    initMap() {\n      var pointA = new google.maps.LatLng(51.7519, -1.2578),\n        pointB = new google.maps.LatLng(50.8429, -0.1313),\n        myOptions = {\n          zoom: 7,\n          center: pointA\n        },\n        map = new google.maps.Map(document.getElementById('map-canvas'), myOptions),\n        // Instantiate a directions service.\n        directionsService = new google.maps.DirectionsService(),\n        directionsDisplay = new google.maps.DirectionsRenderer({\n          map: map\n        }),\n        markerA = new google.maps.Marker({\n          position: pointA,\n          title: \"point A\",\n          label: \"A\",\n          map: map\n        }),\n        markerB = new google.maps.Marker({\n          position: pointB,\n          title: \"point B\",\n          label: \"B\",\n          map: map\n        });\n\n      // get route from A to B\n      calculateAndDisplayRoute(directionsService, directionsDisplay, pointA, pointB);\n    },\n    calculateAndDisplayRoute(directionsService, directionsDisplay, pointA, pointB) {\n      directionsService.route({\n        origin: pointA,\n        destination: pointB,\n        travelMode: google.maps.TravelMode.DRIVING\n      }, function (response, status) {\n        if (status == google.maps.DirectionsStatus.OK) {\n          directionsDisplay.setDirections(response);\n        } else {\n          window.alert('Directions request failed due to ' + status);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAYA,eAAe;EACbA,IAAI,EAAE,gBAAgB;EAEtBC,OAAO,GAAG;IACR,IAAI,CAACC,gBAAgB,EAAE;EACzB,CAAC;EAEDC,OAAO,EAAE;IACPD,gBAAgB,GAAG;MACjB,IAAIE,eAAc,GAAIC,QAAQ,CAACC,aAAa,CAAC,QAAQ;MACrDF,eAAe,CAACG,YAAY,CAAC,KAAK,EAAE,sDAAsD;MAC1FF,QAAQ,CAACG,IAAI,CAACC,WAAW,CAACL,eAAe;IAC3C,CAAC;IAEDM,OAAO,GAAG;MACR,IAAIC,MAAK,GAAI,IAAIC,MAAM,CAACC,IAAI,CAACC,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC;QACjDC,MAAK,GAAI,IAAIH,MAAM,CAACC,IAAI,CAACC,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC;QACjDE,SAAQ,GAAI;UACVC,IAAI,EAAE,CAAC;UACPC,MAAM,EAAEP;QACV,CAAC;QACDQ,GAAE,GAAI,IAAIP,MAAM,CAACC,IAAI,CAACO,GAAG,CAACf,QAAQ,CAACgB,cAAc,CAAC,YAAY,CAAC,EAAEL,SAAS,CAAC;QAC3E;QACAM,iBAAgB,GAAI,IAAIV,MAAM,CAACC,IAAI,CAACU,iBAAiB;QACrDC,iBAAgB,GAAI,IAAIZ,MAAM,CAACC,IAAI,CAACY,kBAAkB,CAAC;UACrDN,GAAG,EAAEA;QACP,CAAC,CAAC;QACFO,OAAM,GAAI,IAAId,MAAM,CAACC,IAAI,CAACc,MAAM,CAAC;UAC/BC,QAAQ,EAAEjB,MAAM;UAChBkB,KAAK,EAAE,SAAS;UAChBC,KAAK,EAAE,GAAG;UACVX,GAAG,EAAEA;QACP,CAAC,CAAC;QACFY,OAAM,GAAI,IAAInB,MAAM,CAACC,IAAI,CAACc,MAAM,CAAC;UAC/BC,QAAQ,EAAEb,MAAM;UAChBc,KAAK,EAAE,SAAS;UAChBC,KAAK,EAAE,GAAG;UACVX,GAAG,EAAEA;QACP,CAAC,CAAC;;MAEN;MACAa,wBAAwB,CAACV,iBAAiB,EAAEE,iBAAiB,EAAEb,MAAM,EAAEI,MAAM,CAAC;IAEhF,CAAC;IAEDiB,wBAAwB,CAACV,iBAAiB,EAAEE,iBAAiB,EAAEb,MAAM,EAAEI,MAAM,EAAE;MAC7EO,iBAAiB,CAACW,KAAK,CAAC;QACtBC,MAAM,EAAEvB,MAAM;QACdwB,WAAW,EAAEpB,MAAM;QACnBqB,UAAU,EAAExB,MAAM,CAACC,IAAI,CAACwB,UAAU,CAACC;MACrC,CAAC,EAAE,UAASC,QAAQ,EAAEC,MAAM,EAAE;QAC5B,IAAIA,MAAK,IAAK5B,MAAM,CAACC,IAAI,CAAC4B,gBAAgB,CAACC,EAAE,EAAE;UAC7ClB,iBAAiB,CAACmB,aAAa,CAACJ,QAAQ,CAAC;QAC3C,OAAO;UACLK,MAAM,CAACC,KAAK,CAAC,mCAAkC,GAAIL,MAAM,CAAC;QAC5D;MACF,CAAC,CAAC;IACJ;EACF;AACF","names":["name","mounted","importGoogleMaps","methods","recaptchaScript","document","createElement","setAttribute","head","appendChild","initMap","pointA","google","maps","LatLng","pointB","myOptions","zoom","center","map","Map","getElementById","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","markerA","Marker","position","title","label","markerB","calculateAndDisplayRoute","route","origin","destination","travelMode","TravelMode","DRIVING","response","status","DirectionsStatus","OK","setDirections","window","alert"],"sourceRoot":"","sources":["/Users/jadenvanrijswijk/Desktop/Programming files/IntelliJ/Assignment1-Trains/smartship-ewa-1/src/components/charts/TripStatistics.vue"],"sourcesContent":["<template>\n  <div class=\"content\">\n    <h1>Trip statistics</h1>\n\n    <p>There is currently no trip going on</p>\n    <p>The curent trip is from Paris to Amsterdam</p>\n\n\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"TripStatistics\",\n\n  mounted() {\n    this.importGoogleMaps();\n  },\n\n  methods: {\n    importGoogleMaps() {\n      let recaptchaScript = document.createElement('script')\n      recaptchaScript.setAttribute('src', 'https://maps.googleapis.com/maps/api/js?sensor=false')\n      document.head.appendChild(recaptchaScript)\n    },\n\n    initMap() {\n      var pointA = new google.maps.LatLng(51.7519, -1.2578),\n          pointB = new google.maps.LatLng(50.8429, -0.1313),\n          myOptions = {\n            zoom: 7,\n            center: pointA\n          },\n          map = new google.maps.Map(document.getElementById('map-canvas'), myOptions),\n          // Instantiate a directions service.\n          directionsService = new google.maps.DirectionsService,\n          directionsDisplay = new google.maps.DirectionsRenderer({\n            map: map\n          }),\n          markerA = new google.maps.Marker({\n            position: pointA,\n            title: \"point A\",\n            label: \"A\",\n            map: map\n          }),\n          markerB = new google.maps.Marker({\n            position: pointB,\n            title: \"point B\",\n            label: \"B\",\n            map: map\n          });\n\n      // get route from A to B\n      calculateAndDisplayRoute(directionsService, directionsDisplay, pointA, pointB);\n\n    },\n\n    calculateAndDisplayRoute(directionsService, directionsDisplay, pointA, pointB) {\n      directionsService.route({\n        origin: pointA,\n        destination: pointB,\n        travelMode: google.maps.TravelMode.DRIVING\n      }, function(response, status) {\n        if (status == google.maps.DirectionsStatus.OK) {\n          directionsDisplay.setDirections(response);\n        } else {\n          window.alert('Directions request failed due to ' + status);\n        }\n      });\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .content {\n    background-color: #163b7a;\n    color:white;\n  }\n</style>"]},"metadata":{},"sourceType":"module"}