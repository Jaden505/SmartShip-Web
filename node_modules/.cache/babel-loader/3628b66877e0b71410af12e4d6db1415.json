{"ast":null,"code":"import { defineComponent, ref, watch, watchEffect, openBlock, createElementBlock, normalizeClass, createElementVNode, Fragment, renderList, normalizeStyle } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport { useOptions } from '../useOption.mjs';\nimport Color from '../color.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  props: {\n    colors: {\n      type: Array,\n      required: true\n    },\n    color: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const ns = useNamespace(\"color-predefine\");\n    const {\n      currentColor\n    } = useOptions();\n    const rgbaColors = ref(parseColors(props.colors, props.color));\n    watch(() => currentColor.value, val => {\n      const color = new Color();\n      color.fromString(val);\n      rgbaColors.value.forEach(item => {\n        item.selected = color.compare(item);\n      });\n    });\n    watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color);\n    });\n    function handleSelect(index) {\n      props.color.fromString(props.colors[index]);\n    }\n    function parseColors(colors, color) {\n      return colors.map(value => {\n        const c = new Color();\n        c.enableAlpha = true;\n        c.format = \"rgba\";\n        c.fromString(value);\n        c.selected = c.value === color.value;\n        return c;\n      });\n    }\n    return {\n      rgbaColors,\n      handleSelect,\n      ns\n    };\n  }\n});\nconst _hoisted_1 = [\"onClick\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.ns.b())\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"colors\"))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rgbaColors, (item, index) => {\n    return openBlock(), createElementBlock(\"div\", {\n      key: _ctx.colors[index],\n      class: normalizeClass([_ctx.ns.e(\"color-selector\"), _ctx.ns.is(\"alpha\", item._alpha < 100), {\n        selected: item.selected\n      }]),\n      onClick: $event => _ctx.handleSelect(index)\n    }, [createElementVNode(\"div\", {\n      style: normalizeStyle({\n        backgroundColor: item.value\n      })\n    }, null, 4)], 10, _hoisted_1);\n  }), 128))], 2)], 2);\n}\nvar Predefine = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/predefine.vue\"]]);\nexport { Predefine as default };","map":{"version":3,"mappings":";;;;;;AA4BA,MAAKA,YAAaC,eAAa;EAC7BC,KAAO;IACLC,MAAQ;MAAEC,IAAM;MAAOC,UAAU;IAAK;IACtCC,KAAO;MACLF,IAAM;MACNC,QAAU;IAAA;EACZ,CACF;EACAE,MAAML,KAAO;IACL,WAAKM,aAAa,iBAAiB;IACnC;MAAEC;IAAA,IAAiBC,UAAW;IAEpC,MAAMC,aAAaC,GAAI,aAAYV,MAAMC,MAAQ,QAAMG,KAAK,CAAC;IAG7DO,MACE,MAAMJ,aAAaK,KACnB,EAACC,GAAQ;MACD,cAAQ,IAAIC,KAAM;MACxBV,MAAMW,WAAWF,GAAG;MAETJ,iBAAMO,OAAQ,CAACC,IAAS;QAC5BA,gBAAWb,KAAM,SAAQa,IAAI;MAAA,CACnC;IAAA,CAEL;IACAC,YAAY,MAAM;MAChBT,WAAWG,KAAQ,eAAYZ,KAAM,SAAQA,MAAMI,KAAK;IAAA,CACzD;IAED,sBAAsBe,KAAO;MAC3BnB,MAAMI,KAAM,YAAWJ,KAAM,QAAOmB,KAAM;IAAA;IAE5C,qBAAqBlB,QAAQG,KAAO;MAC3B,cAAOgB,GAAI,CAACR,KAAU;QACrB,UAAI,IAAIE,KAAM;QACpBO,EAAEC,WAAc;QAChBD,EAAEE,MAAS;QACXF,EAAEN,WAAWH,KAAK;QAChBS,aAAWA,CAAE,WAAUjB,KAAM;QACxB;MAAA,CACR;IAAA;IAEI;MACLK;MACAe;MACAC;IAAA,CACF;EAAA;AAEJ,CAAC;;;sBA5ECC,kBAeM;IAfAC,OAAKC,cAAE,SAAGC,CAAC;EAAA,IACfC,kBAaM;IAbAH,OAAKC,cAAE,SAAGG,CAAC;EAAA,KACfC,oCAWMC,QAVoB,oCAAU,CAA1BhB,MAAME,KAAK;wBADrBO,kBAWM;MATHQ,KAAKC,IAAO;MACZR,KAAK,kBAAcQ,QAAGJ,CAAC,oBAA8BI,IAAG,OAAE,OAAU,OAAKC,MAAM;QAAAC,UAA+BpB,KAAKoB;MAAQ;MAK3HC,OAAK,YAAEH,kBAAahB,KAAK;IAAA,IAE1BW,kBAAgD;MAA1CS,OAAKC,cAAqB;QAAAC,sBAAK7B;MAAK;IAAA","names":["_sfc_main","defineComponent","props","colors","type","required","color","setup","useNamespace","currentColor","useOptions","rgbaColors","ref","watch","value","val","Color","fromString","forEach","item","watchEffect","index","map","c","enableAlpha","format","handleSelect","ns","_createElementBlock","class","_normalizeClass","b","_createElementVNode","e","_openBlock","_Fragment","key","_ctx","_alpha","selected","onClick","style","_normalizeStyle","backgroundColor"],"sources":["../../../../../../../packages/components/color-picker/src/components/predefine.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <div :class=\"ns.e('colors')\">\n      <div\n        v-for=\"(item, index) in rgbaColors\"\n        :key=\"colors[index]\"\n        :class=\"[\n          ns.e('color-selector'),\n          ns.is('alpha', item._alpha < 100),\n          { selected: item.selected },\n        ]\"\n        @click=\"handleSelect(index)\"\n      >\n        <div :style=\"{ backgroundColor: item.value }\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport { defineComponent, ref, watch, watchEffect } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useOptions } from '../useOption'\nimport Color from '../color'\n\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  props: {\n    colors: { type: Array, required: true },\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n  },\n  setup(props) {\n    const ns = useNamespace('color-predefine')\n    const { currentColor } = useOptions()\n    //data\n    const rgbaColors = ref(parseColors(props.colors, props.color))\n\n    //watch\n    watch(\n      () => currentColor.value,\n      (val) => {\n        const color = new Color()\n        color.fromString(val)\n\n        rgbaColors.value.forEach((item) => {\n          item.selected = color.compare(item)\n        })\n      }\n    )\n    watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color)\n    })\n\n    function handleSelect(index) {\n      props.color.fromString(props.colors[index])\n    }\n    function parseColors(colors, color) {\n      return colors.map((value) => {\n        const c = new Color()\n        c.enableAlpha = true\n        c.format = 'rgba'\n        c.fromString(value)\n        c.selected = c.value === color.value\n        return c\n      })\n    }\n    return {\n      rgbaColors,\n      handleSelect,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}