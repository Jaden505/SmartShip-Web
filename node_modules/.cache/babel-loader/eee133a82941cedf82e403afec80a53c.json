{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { inject, computed, ref, getCurrentInstance, toRaw, nextTick, watch } from 'vue';\nimport { toTypeString, isString, isArray } from '@vue/shared';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { useSizeProp, useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../../hooks/use-form-item/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isNumber, isBoolean } from '@vueuse/core';\nconst useCheckboxGroupProps = {\n  modelValue: {\n    type: Array,\n    default: () => []\n  },\n  disabled: Boolean,\n  min: {\n    type: Number,\n    default: void 0\n  },\n  max: {\n    type: Number,\n    default: void 0\n  },\n  size: useSizeProp,\n  id: {\n    type: String,\n    default: void 0\n  },\n  label: {\n    type: String,\n    default: void 0\n  },\n  fill: {\n    type: String,\n    default: void 0\n  },\n  textColor: {\n    type: String,\n    default: void 0\n  },\n  tag: {\n    type: String,\n    default: \"div\"\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true\n  }\n};\nconst checkboxProps = {\n  modelValue: {\n    type: [Number, String, Boolean],\n    default: () => void 0\n  },\n  label: {\n    type: [String, Boolean, Number, Object]\n  },\n  indeterminate: Boolean,\n  disabled: Boolean,\n  checked: Boolean,\n  name: {\n    type: String,\n    default: void 0\n  },\n  trueLabel: {\n    type: [String, Number],\n    default: void 0\n  },\n  falseLabel: {\n    type: [String, Number],\n    default: void 0\n  },\n  id: {\n    type: String,\n    default: void 0\n  },\n  controls: {\n    type: String,\n    default: void 0\n  },\n  border: Boolean,\n  size: useSizeProp,\n  tabindex: [String, Number],\n  validateEvent: {\n    type: Boolean,\n    default: true\n  }\n};\nconst useCheckboxGroup = () => {\n  const {\n    form: elForm,\n    formItem: elFormItem\n  } = useFormItem();\n  const checkboxGroup = inject(\"CheckboxGroup\", {});\n  const isGroup = computed(() => checkboxGroup && (checkboxGroup == null ? void 0 : checkboxGroup.name) === \"ElCheckboxGroup\");\n  const elFormItemSize = computed(() => {\n    return elFormItem == null ? void 0 : elFormItem.size;\n  });\n  return {\n    isGroup,\n    checkboxGroup,\n    elForm,\n    elFormItemSize,\n    elFormItem\n  };\n};\nconst useCheckboxGroupId = (props, {\n  elFormItem\n}) => {\n  const {\n    inputId: groupId,\n    isLabeledByFormItem\n  } = useFormItemInputId(props, {\n    formItemContext: elFormItem\n  });\n  return {\n    isLabeledByFormItem,\n    groupId\n  };\n};\nconst useModel = props => {\n  const selfModel = ref(false);\n  const {\n    emit\n  } = getCurrentInstance();\n  const {\n    isGroup,\n    checkboxGroup,\n    elFormItem\n  } = useCheckboxGroup();\n  const isLimitExceeded = ref(false);\n  const model = computed({\n    get() {\n      var _a, _b;\n      return isGroup.value ? (_a = checkboxGroup.modelValue) == null ? void 0 : _a.value : (_b = props.modelValue) != null ? _b : selfModel.value;\n    },\n    set(val) {\n      var _a;\n      if (isGroup.value && Array.isArray(val)) {\n        isLimitExceeded.value = checkboxGroup.max !== void 0 && val.length > checkboxGroup.max.value;\n        isLimitExceeded.value === false && ((_a = checkboxGroup == null ? void 0 : checkboxGroup.changeEvent) == null ? void 0 : _a.call(checkboxGroup, val));\n      } else {\n        emit(UPDATE_MODEL_EVENT, val);\n        selfModel.value = val;\n      }\n    }\n  });\n  return {\n    model,\n    isGroup,\n    isLimitExceeded,\n    elFormItem\n  };\n};\nconst useCheckboxStatus = (props, slots, {\n  model\n}) => {\n  const {\n    isGroup,\n    checkboxGroup\n  } = useCheckboxGroup();\n  const focus = ref(false);\n  const size = useSize(checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize, {\n    prop: true\n  });\n  const isChecked = computed(() => {\n    const value = model.value;\n    if (toTypeString(value) === \"[object Boolean]\") {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.map(toRaw).includes(props.label);\n    } else if (value !== null && value !== void 0) {\n      return value === props.trueLabel;\n    } else {\n      return !!value;\n    }\n  });\n  const checkboxSize = useSize(computed(() => {\n    var _a;\n    return isGroup.value ? (_a = checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize) == null ? void 0 : _a.value : void 0;\n  }));\n  const hasOwnLabel = computed(() => {\n    return !!(slots.default || props.label);\n  });\n  return {\n    isChecked,\n    focus,\n    size,\n    checkboxSize,\n    hasOwnLabel\n  };\n};\nconst useDisabled = (props, {\n  model,\n  isChecked\n}) => {\n  const {\n    elForm,\n    isGroup,\n    checkboxGroup\n  } = useCheckboxGroup();\n  const isLimitDisabled = computed(() => {\n    var _a, _b;\n    const max = (_a = checkboxGroup.max) == null ? void 0 : _a.value;\n    const min = (_b = checkboxGroup.min) == null ? void 0 : _b.value;\n    return !!(max || min) && model.value.length >= max && !isChecked.value || model.value.length <= min && isChecked.value;\n  });\n  const isDisabled = computed(() => {\n    var _a, _b;\n    const disabled = props.disabled || (elForm == null ? void 0 : elForm.disabled);\n    return (_b = isGroup.value ? ((_a = checkboxGroup.disabled) == null ? void 0 : _a.value) || disabled || isLimitDisabled.value : disabled) != null ? _b : false;\n  });\n  return {\n    isDisabled,\n    isLimitDisabled\n  };\n};\nconst setStoreValue = (props, {\n  model\n}) => {\n  function addToStore() {\n    if (Array.isArray(model.value) && !model.value.includes(props.label)) {\n      model.value.push(props.label);\n    } else {\n      model.value = props.trueLabel || true;\n    }\n  }\n  props.checked && addToStore();\n};\nconst useEvent = (props, {\n  model,\n  isLimitExceeded,\n  hasOwnLabel,\n  isDisabled,\n  isLabeledByFormItem\n}) => {\n  const {\n    elFormItem,\n    checkboxGroup\n  } = useCheckboxGroup();\n  const {\n    emit\n  } = getCurrentInstance();\n  function getLabeledValue(value) {\n    var _a, _b;\n    return value === props.trueLabel || value === true ? (_a = props.trueLabel) != null ? _a : true : (_b = props.falseLabel) != null ? _b : false;\n  }\n  function emitChangeEvent(checked, e) {\n    emit(\"change\", getLabeledValue(checked), e);\n  }\n  function handleChange(e) {\n    if (isLimitExceeded.value) return;\n    const target = e.target;\n    emit(\"change\", getLabeledValue(target.checked), e);\n  }\n  async function onClickRoot(e) {\n    if (isLimitExceeded.value) return;\n    if (!hasOwnLabel.value && !isDisabled.value && isLabeledByFormItem.value) {\n      model.value = getLabeledValue([false, props.falseLabel].includes(model.value));\n      await nextTick();\n      emitChangeEvent(model.value, e);\n    }\n  }\n  const validateEvent = computed(() => {\n    var _a;\n    return ((_a = checkboxGroup.validateEvent) == null ? void 0 : _a.value) || props.validateEvent;\n  });\n  watch(() => props.modelValue, () => {\n    if (validateEvent.value) {\n      elFormItem == null ? void 0 : elFormItem.validate(\"change\").catch(err => debugWarn(err));\n    }\n  });\n  return {\n    handleChange,\n    onClickRoot\n  };\n};\nconst checkboxEmits = {\n  [UPDATE_MODEL_EVENT]: val => isString(val) || isNumber(val) || isBoolean(val),\n  change: val => isString(val) || isNumber(val) || isBoolean(val)\n};\nconst checkboxGroupEmits = {\n  [UPDATE_MODEL_EVENT]: val => isArray(val),\n  change: val => isArray(val)\n};\nconst useCheckbox = (props, slots) => {\n  const {\n    model,\n    isGroup,\n    isLimitExceeded,\n    elFormItem\n  } = useModel(props);\n  const {\n    focus,\n    size,\n    isChecked,\n    checkboxSize,\n    hasOwnLabel\n  } = useCheckboxStatus(props, slots, {\n    model\n  });\n  const {\n    isDisabled\n  } = useDisabled(props, {\n    model,\n    isChecked\n  });\n  const {\n    inputId,\n    isLabeledByFormItem\n  } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n    disableIdGeneration: hasOwnLabel,\n    disableIdManagement: isGroup\n  });\n  const {\n    handleChange,\n    onClickRoot\n  } = useEvent(props, {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem\n  });\n  setStoreValue(props, {\n    model\n  });\n  return {\n    elFormItem,\n    inputId,\n    isLabeledByFormItem,\n    isChecked,\n    isDisabled,\n    isGroup,\n    checkboxSize,\n    hasOwnLabel,\n    model,\n    handleChange,\n    onClickRoot,\n    focus,\n    size\n  };\n};\nexport { checkboxEmits, checkboxGroupEmits, checkboxProps, useCheckbox, useCheckboxGroup, useCheckboxGroupId, useCheckboxGroupProps };","map":{"version":3,"mappings":"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","names":["useCheckboxGroupProps","modelValue","type","Array","default","disabled","Boolean","min","Number","max","size","useSizeProp","id","String","label","fill","textColor","tag","validateEvent","checkboxProps","Object","indeterminate","checked","name","trueLabel","falseLabel","controls","border","tabindex","useCheckboxGroup","form","elForm","formItem","elFormItem","useFormItem","checkboxGroup","inject","isGroup","computed","elFormItemSize","useCheckboxGroupId","props","inputId","groupId","isLabeledByFormItem","useFormItemInputId","formItemContext","useModel","selfModel","ref","emit","getCurrentInstance","isLimitExceeded","model","get","_a","_b","value","set","val","isArray","length","changeEvent","call","UPDATE_MODEL_EVENT","useCheckboxStatus","slots","focus","useSize","checkboxGroupSize","prop","isChecked","toTypeString","map","toRaw","includes","checkboxSize","hasOwnLabel","useDisabled","isLimitDisabled","isDisabled","setStoreValue","addToStore","push","useEvent","getLabeledValue","emitChangeEvent","e","handleChange","target","onClickRoot","nextTick","watch","validate","catch","err","debugWarn","checkboxEmits","isString","isNumber","isBoolean","change","checkboxGroupEmits","useCheckbox","disableIdGeneration","disableIdManagement"],"sources":["../../../../../../packages/components/checkbox/src/checkbox.ts"],"sourcesContent":["import {\n  computed,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  ref,\n  toRaw,\n  watch,\n} from 'vue'\nimport { toTypeString } from '@vue/shared'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport {\n  useFormItem,\n  useFormItemInputId,\n  useSize,\n  useSizeProp,\n} from '@element-plus/hooks'\nimport {\n  debugWarn,\n  isArray,\n  isBoolean,\n  isNumber,\n  isString,\n} from '@element-plus/utils'\n\nimport type { ComponentInternalInstance, ExtractPropTypes, PropType } from 'vue'\nimport type { ICheckboxGroupInstance } from './checkbox.type'\nimport type Checkbox from './checkbox.vue'\n\nexport const useCheckboxGroupProps = {\n  modelValue: {\n    type: Array as PropType<Array<string | number>>,\n    default: () => [],\n  },\n  disabled: Boolean,\n  min: {\n    type: Number,\n    default: undefined,\n  },\n  max: {\n    type: Number,\n    default: undefined,\n  },\n  size: useSizeProp,\n  id: {\n    type: String,\n    default: undefined,\n  },\n  label: {\n    type: String,\n    default: undefined,\n  },\n  fill: {\n    type: String,\n    default: undefined,\n  },\n  textColor: {\n    type: String,\n    default: undefined,\n  },\n  tag: {\n    type: String,\n    default: 'div',\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n}\n\nexport type IUseCheckboxGroupProps = ExtractPropTypes<\n  typeof useCheckboxGroupProps\n>\n\nexport const checkboxProps = {\n  modelValue: {\n    type: [Number, String, Boolean],\n    default: () => undefined,\n  },\n  label: {\n    type: [String, Boolean, Number, Object],\n  },\n  indeterminate: Boolean,\n  disabled: Boolean,\n  checked: Boolean,\n  name: {\n    type: String,\n    default: undefined,\n  },\n  trueLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  falseLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  id: {\n    type: String,\n    default: undefined,\n  },\n  controls: {\n    type: String,\n    default: undefined,\n  },\n  border: Boolean,\n  size: useSizeProp,\n  tabindex: [String, Number],\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n}\n\nexport const useCheckboxGroup = () => {\n  const { form: elForm, formItem: elFormItem } = useFormItem()\n  const checkboxGroup = inject<ICheckboxGroupInstance>('CheckboxGroup', {})\n  const isGroup = computed(\n    () => checkboxGroup && checkboxGroup?.name === 'ElCheckboxGroup'\n  )\n  const elFormItemSize = computed(() => {\n    return elFormItem?.size\n  })\n  return {\n    isGroup,\n    checkboxGroup,\n    elForm,\n    elFormItemSize,\n    elFormItem,\n  }\n}\n\nexport const useCheckboxGroupId = (\n  props: IUseCheckboxGroupProps,\n  { elFormItem }: Partial<ReturnType<typeof useCheckboxGroup>>\n) => {\n  const { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n  })\n\n  return {\n    isLabeledByFormItem,\n    groupId,\n  }\n}\n\nconst useModel = (props: CheckboxProps) => {\n  const selfModel = ref<any>(false)\n  const { emit } = getCurrentInstance()!\n  const { isGroup, checkboxGroup, elFormItem } = useCheckboxGroup()\n  const isLimitExceeded = ref(false)\n  const model = computed({\n    get() {\n      return isGroup.value\n        ? checkboxGroup.modelValue?.value\n        : props.modelValue ?? selfModel.value\n    },\n\n    set(val: unknown) {\n      if (isGroup.value && Array.isArray(val)) {\n        isLimitExceeded.value =\n          checkboxGroup.max !== undefined &&\n          val.length > checkboxGroup.max.value\n        isLimitExceeded.value === false && checkboxGroup?.changeEvent?.(val)\n      } else {\n        emit(UPDATE_MODEL_EVENT, val)\n        selfModel.value = val\n      }\n    },\n  })\n\n  return {\n    model,\n    isGroup,\n    isLimitExceeded,\n    elFormItem,\n  }\n}\n\nconst useCheckboxStatus = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots'],\n  { model }: Partial<ReturnType<typeof useModel>>\n) => {\n  const { isGroup, checkboxGroup } = useCheckboxGroup()\n  const focus = ref(false)\n  const size = useSize(checkboxGroup?.checkboxGroupSize, { prop: true })\n  const isChecked = computed<boolean>(() => {\n    const value = model!.value\n    if (toTypeString(value) === '[object Boolean]') {\n      return value\n    } else if (Array.isArray(value)) {\n      return value.map(toRaw).includes(props.label)\n    } else if (value !== null && value !== undefined) {\n      return value === props.trueLabel\n    } else {\n      return !!value\n    }\n  })\n\n  const checkboxSize = useSize(\n    computed(() =>\n      isGroup.value ? checkboxGroup?.checkboxGroupSize?.value : undefined\n    )\n  )\n\n  const hasOwnLabel = computed<boolean>(() => {\n    return !!(slots.default || props.label)\n  })\n\n  return {\n    isChecked,\n    focus,\n    size,\n    checkboxSize,\n    hasOwnLabel,\n  }\n}\n\nconst useDisabled = (\n  props: CheckboxProps,\n  {\n    model,\n    isChecked,\n  }: Partial<ReturnType<typeof useModel>> &\n    Partial<ReturnType<typeof useCheckboxStatus>>\n) => {\n  const { elForm, isGroup, checkboxGroup } = useCheckboxGroup()\n  const isLimitDisabled = computed(() => {\n    const max = checkboxGroup.max?.value!\n    const min = checkboxGroup.min?.value!\n    return (\n      (!!(max || min) && model!.value.length >= max && !isChecked!.value) ||\n      (model!.value.length <= min && isChecked!.value)\n    )\n  })\n  const isDisabled = computed(() => {\n    const disabled = props.disabled || elForm?.disabled\n    return (\n      (isGroup.value\n        ? checkboxGroup.disabled?.value || disabled || isLimitDisabled.value\n        : disabled) ?? false\n    )\n  })\n\n  return {\n    isDisabled,\n    isLimitDisabled,\n  }\n}\n\nconst setStoreValue = (\n  props: CheckboxProps,\n  { model }: Partial<ReturnType<typeof useModel>>\n) => {\n  function addToStore() {\n    if (Array.isArray(model!.value) && !model!.value.includes(props.label)) {\n      model!.value.push(props.label)\n    } else {\n      model!.value = props.trueLabel || true\n    }\n  }\n  props.checked && addToStore()\n}\n\nconst useEvent = (\n  props: CheckboxProps,\n  {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  }: Partial<\n    ReturnType<typeof useModel> &\n      ReturnType<typeof useCheckboxStatus> &\n      ReturnType<typeof useDisabled> &\n      ReturnType<typeof useFormItemInputId>\n  >\n) => {\n  const { elFormItem, checkboxGroup } = useCheckboxGroup()\n  const { emit } = getCurrentInstance()!\n\n  function getLabeledValue(value: string | number | boolean) {\n    return value === props.trueLabel || value === true\n      ? props.trueLabel ?? true\n      : props.falseLabel ?? false\n  }\n\n  function emitChangeEvent(\n    checked: string | number | boolean,\n    e: InputEvent | MouseEvent\n  ) {\n    emit('change', getLabeledValue(checked), e)\n  }\n\n  function handleChange(e: Event) {\n    if (isLimitExceeded!.value) return\n    const target = e.target as HTMLInputElement\n    emit('change', getLabeledValue(target.checked), e)\n  }\n\n  async function onClickRoot(e: MouseEvent) {\n    if (isLimitExceeded!.value) return\n    if (\n      !hasOwnLabel!.value &&\n      !isDisabled!.value &&\n      isLabeledByFormItem!.value\n    ) {\n      model!.value = getLabeledValue(\n        [false, props.falseLabel].includes(model!.value)\n      )\n      await nextTick()\n      emitChangeEvent(model!.value, e)\n    }\n  }\n\n  const validateEvent = computed(\n    () => checkboxGroup.validateEvent?.value || props.validateEvent\n  )\n\n  watch(\n    () => props.modelValue,\n    () => {\n      if (validateEvent.value) {\n        elFormItem?.validate('change').catch((err) => debugWarn(err))\n      }\n    }\n  )\n\n  return {\n    handleChange,\n    onClickRoot,\n  }\n}\n\nexport type CheckboxValueType = string | number | boolean\n\nexport const checkboxEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CheckboxValueType) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n  change: (val: CheckboxValueType) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n}\n\nexport const checkboxGroupEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CheckboxValueType[]) => isArray(val),\n  change: (val: CheckboxValueType[]) => isArray(val),\n}\n\nexport const useCheckbox = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots']\n) => {\n  const { model, isGroup, isLimitExceeded, elFormItem } = useModel(props)\n  const { focus, size, isChecked, checkboxSize, hasOwnLabel } =\n    useCheckboxStatus(props, slots, {\n      model,\n    })\n  const { isDisabled } = useDisabled(props, { model, isChecked })\n  const { inputId, isLabeledByFormItem } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n    disableIdGeneration: hasOwnLabel,\n    disableIdManagement: isGroup,\n  })\n  const { handleChange, onClickRoot } = useEvent(props, {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  })\n\n  setStoreValue(props, { model })\n\n  return {\n    elFormItem,\n    inputId,\n    isLabeledByFormItem,\n    isChecked,\n    isDisabled,\n    isGroup,\n    checkboxSize,\n    hasOwnLabel,\n    model,\n    handleChange,\n    onClickRoot,\n    focus,\n    size,\n  }\n}\n\nexport type CheckboxProps = ExtractPropTypes<typeof checkboxProps>\nexport type CheckboxEmits = typeof checkboxEmits\nexport type CheckboxInstance = InstanceType<typeof Checkbox>\n"]},"metadata":{},"sourceType":"module"}